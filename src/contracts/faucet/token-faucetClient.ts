/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"token-faucet","structs":{},"methods":[{"name":"createApplication","args":[{"type":"account","name":"admin"},{"type":"uint64","name":"tokenId"},{"type":"uint64","name":"dripAmount"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"initApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"dripToken","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"token_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW5faWQ="},"drip_amount":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZHJpcF9hbW91bnQ="},"admin_account":{"keyType":"AVMString","valueType":"address","key":"YWRtaW5fYWNjb3VudA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[81,93,105],"errorMessage":"OnCompletion is not NoOp"},{"pc":[152],"errorMessage":"Only admin can initialize the application"},{"pc":[109],"errorMessage":"can only call when creating"},{"pc":[84,96],"errorMessage":"can only call when not creating"},{"pc":[150,159,163,182,186],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyADAAEEJgMIdG9rZW5faWQLZHJpcF9hbW91bnQNYWRtaW5fYWNjb3VudDEbQQAcggMEt+yjmATYz3ZgBL+Zx/02GgCOAwAaAA4AAiJDMRkURDEYRIgAWiNDMRkURDEYRIgALSNDMRkURDEYFEQ2GgEXwBw2GgIXNhoDF4gAAiNDigMAKov9ZyiL/mcpi/9niTEAIiplRBJEsTIKIihlRCIpZUSyErIRshQkshAisgGzibEiKGVEIillRDEAshSyErIRJLIQIrIBs4k=","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TokenFaucet contract
 */
export type TokenFaucetArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account,uint64,uint64)void': {
      admin: Uint8Array | string
      tokenId: bigint | number
      dripAmount: bigint | number
    }
    'initApplication()void': Record<string, never>
    'dripToken()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account,uint64,uint64)void': [admin: Uint8Array | string, tokenId: bigint | number, dripAmount: bigint | number]
    'initApplication()void': []
    'dripToken()void': []
  }
}

/**
 * The return type for each method
 */
export type TokenFaucetReturns = {
  'createApplication(account,uint64,uint64)void': void
  'initApplication()void': void
  'dripToken()void': void
}

/**
 * Defines the types of available calls and state of the TokenFaucet smart contract.
 */
export type TokenFaucetTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account,uint64,uint64)void' | 'createApplication', {
      argsObj: TokenFaucetArgs['obj']['createApplication(account,uint64,uint64)void']
      argsTuple: TokenFaucetArgs['tuple']['createApplication(account,uint64,uint64)void']
      returns: TokenFaucetReturns['createApplication(account,uint64,uint64)void']
    }>
    & Record<'initApplication()void' | 'initApplication', {
      argsObj: TokenFaucetArgs['obj']['initApplication()void']
      argsTuple: TokenFaucetArgs['tuple']['initApplication()void']
      returns: TokenFaucetReturns['initApplication()void']
    }>
    & Record<'dripToken()void' | 'dripToken', {
      argsObj: TokenFaucetArgs['obj']['dripToken()void']
      argsTuple: TokenFaucetArgs['tuple']['dripToken()void']
      returns: TokenFaucetReturns['dripToken()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        tokenId: bigint
        dripAmount: bigint
        adminAccount: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TokenFaucetSignatures = keyof TokenFaucetTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TokenFaucetNonVoidMethodSignatures = keyof TokenFaucetTypes['methods'] extends infer T ? T extends keyof TokenFaucetTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TokenFaucet smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TokenFaucetSignatures> = TokenFaucetTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TokenFaucet smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TokenFaucetSignatures> = TokenFaucetTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TokenFaucetTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TokenFaucetCreateCallParams =
  | Expand<CallParams<TokenFaucetArgs['obj']['createApplication(account,uint64,uint64)void'] | TokenFaucetArgs['tuple']['createApplication(account,uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TokenFaucetArgs['obj']['createApplication(account,uint64,uint64)void'] | TokenFaucetArgs['tuple']['createApplication(account,uint64,uint64)void']> & {method: 'createApplication(account,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TokenFaucetDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TokenFaucetCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TokenFaucet smart contract
 */
export abstract class TokenFaucetParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TokenFaucetCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(account,uint64,uint64)void':
            return TokenFaucetParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the token-faucet smart contract using the createApplication(account,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TokenFaucetArgs['obj']['createApplication(account,uint64,uint64)void'] | TokenFaucetArgs['tuple']['createApplication(account,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(account,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin, params.args.tokenId, params.args.dripAmount],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<TokenFaucetArgs['obj']['initApplication()void'] | TokenFaucetArgs['tuple']['initApplication()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the dripToken()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dripToken(params: CallParams<TokenFaucetArgs['obj']['dripToken()void'] | TokenFaucetArgs['tuple']['dripToken()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dripToken()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the token-faucet smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TokenFaucetFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TokenFaucetFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TokenFaucetClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TokenFaucetClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the token-faucet smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TokenFaucetDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TokenFaucetParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TokenFaucetCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TokenFaucetClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the token-faucet smart contract using the createApplication(account,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TokenFaucetArgs['obj']['createApplication(account,uint64,uint64)void'] | TokenFaucetArgs['tuple']['createApplication(account,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(TokenFaucetParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the token-faucet smart contract using the createApplication(account,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TokenFaucetArgs['obj']['createApplication(account,uint64,uint64)void'] | TokenFaucetArgs['tuple']['createApplication(account,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(TokenFaucetParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the token-faucet smart contract using an ABI method call using the createApplication(account,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TokenFaucetArgs['obj']['createApplication(account,uint64,uint64)void'] | TokenFaucetArgs['tuple']['createApplication(account,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(TokenFaucetParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TokenFaucetReturns['createApplication(account,uint64,uint64)void']) }, appClient: new TokenFaucetClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the token-faucet smart contract
 */
export class TokenFaucetClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TokenFaucetClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TokenFaucet app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TokenFaucetClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TokenFaucetNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TokenFaucetClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TokenFaucetClient> {
    return new TokenFaucetClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TokenFaucetClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TokenFaucetClient> {
    return new TokenFaucetClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the token-faucet smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the token-faucet smart contract using the `initApplication()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<TokenFaucetArgs['obj']['initApplication()void'] | TokenFaucetArgs['tuple']['initApplication()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenFaucetParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the token-faucet smart contract using the `dripToken()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dripToken: (params: CallParams<TokenFaucetArgs['obj']['dripToken()void'] | TokenFaucetArgs['tuple']['dripToken()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenFaucetParamsFactory.dripToken(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the token-faucet smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the token-faucet smart contract using the `initApplication()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<TokenFaucetArgs['obj']['initApplication()void'] | TokenFaucetArgs['tuple']['initApplication()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenFaucetParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the token-faucet smart contract using the `dripToken()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dripToken: (params: CallParams<TokenFaucetArgs['obj']['dripToken()void'] | TokenFaucetArgs['tuple']['dripToken()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenFaucetParamsFactory.dripToken(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the token-faucet smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the token-faucet smart contract using the `initApplication()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<TokenFaucetArgs['obj']['initApplication()void'] | TokenFaucetArgs['tuple']['initApplication()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenFaucetParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | TokenFaucetReturns['initApplication()void'])}
    },

    /**
     * Makes a call to the token-faucet smart contract using the `dripToken()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dripToken: async (params: CallParams<TokenFaucetArgs['obj']['dripToken()void'] | TokenFaucetArgs['tuple']['dripToken()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenFaucetParamsFactory.dripToken(params))
      return {...result, return: result.return as unknown as (undefined | TokenFaucetReturns['dripToken()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TokenFaucetClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current token-faucet app
   */
  state = {
    /**
     * Methods to access global state for the current token-faucet app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          tokenId: result.token_id,
          dripAmount: result.drip_amount,
          adminAccount: result.admin_account,
        }
      },
      /**
       * Get the current value of the token_id key in global state
       */
      tokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("token_id")) as bigint | undefined },
      /**
       * Get the current value of the drip_amount key in global state
       */
      dripAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("drip_amount")) as bigint | undefined },
      /**
       * Get the current value of the admin_account key in global state
       */
      adminAccount: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin_account")) as string | undefined },
    },
  }

  public newGroup(): TokenFaucetComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication()void method call against the token-faucet contract
       */
      initApplication(params: CallParams<TokenFaucetArgs['obj']['initApplication()void'] | TokenFaucetArgs['tuple']['initApplication()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a dripToken()void method call against the token-faucet contract
       */
      dripToken(params: CallParams<TokenFaucetArgs['obj']['dripToken()void'] | TokenFaucetArgs['tuple']['dripToken()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dripToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the token-faucet contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TokenFaucetComposer
  }
}
export type TokenFaucetComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<TokenFaucetArgs['obj']['initApplication()void'] | TokenFaucetArgs['tuple']['initApplication()void']>): TokenFaucetComposer<[...TReturns, TokenFaucetReturns['initApplication()void'] | undefined]>

  /**
   * Calls the dripToken()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dripToken(params?: CallParams<TokenFaucetArgs['obj']['dripToken()void'] | TokenFaucetArgs['tuple']['dripToken()void']>): TokenFaucetComposer<[...TReturns, TokenFaucetReturns['dripToken()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the token-faucet smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TokenFaucetComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TokenFaucetComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TokenFaucetComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TokenFaucetComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TokenFaucetComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TokenFaucetComposerResults<TReturns>>
}
export type TokenFaucetComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

