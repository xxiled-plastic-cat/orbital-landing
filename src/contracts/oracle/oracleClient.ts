/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"oracle","structs":{"OracleKey":[{"name":"assetId","type":"uint64"}],"TokenPrice":[{"name":"assetId","type":"uint64"},{"name":"price","type":"uint64"},{"name":"lastUpdated","type":"uint64"}]},"methods":[{"name":"createApplication","args":[{"type":"account","name":"admin"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"addTokenListing","args":[{"type":"uint64","name":"assetId"},{"type":"uint64","name":"initialPrice"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateTokenPrice","args":[{"type":"uint64","name":"assetId"},{"type":"uint64","name":"newPrice"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getTokenPrice","args":[{"type":"uint64","name":"assetId"}],"returns":{"type":"(uint64,uint64,uint64)","struct":"TokenPrice"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"removeTokenListing","args":[{"type":"uint64","name":"assetId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin_account":{"keyType":"AVMString","valueType":"address","key":"YWRtaW5fYWNjb3VudA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"token_prices":{"keyType":"OracleKey","valueType":"TokenPrice","prefix":"cHJpY2Vz"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[252],"errorMessage":"Box must have value"},{"pc":[80,95,119,137,155],"errorMessage":"OnCompletion is not NoOp"},{"pc":[159],"errorMessage":"can only call when creating"},{"pc":[83,98,122,140],"errorMessage":"can only call when not creating"},{"pc":[187,215,262],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyACAQAmAg1hZG1pbl9hY2NvdW50BnByaWNlczEbQQAqggUE2lP+/gQ7r4jRBIKCnF0ErBPgBAQjq5tqNhoAjgUATQA7ACkAEQACI0MxGRREMRhENhoBiACkIkMxGRREMRhENhoBiACGgAQVH3x1TFCwIkMxGRREMRhENhoBNhoCiABLIkMxGRREMRhENhoBNhoCiAAdIkMxGRREMRgURDYaARfAHIgAAiJDigEAKIv/Z4mKAgAxACMoZUQSRDIHFov+i/9QTFApi/5QTL+JigIAMQAjKGVEEkQpi/5QSb1FAUQyBxaL/ov/UExQv4mKAQEpi/9QSb1FAUS+RImKAQAxACMoZUQSRCmL/1BJvUUBRLxIiQ==","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type OracleKey = {
  assetId: bigint
}


/**
 * Converts the ABI tuple representation of a OracleKey to the struct representation
 */
export function OracleKeyFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.OracleKey, APP_SPEC.structs) as OracleKey
}

export type TokenPrice = {
  assetId: bigint,
  price: bigint,
  lastUpdated: bigint
}


/**
 * Converts the ABI tuple representation of a TokenPrice to the struct representation
 */
export function TokenPriceFromTuple(abiTuple: [bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.TokenPrice, APP_SPEC.structs) as TokenPrice
}

/**
 * The argument types for the Oracle contract
 */
export type OracleArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account)void': {
      admin: Uint8Array | string
    }
    'addTokenListing(uint64,uint64)void': {
      assetId: bigint | number
      initialPrice: bigint | number
    }
    'updateTokenPrice(uint64,uint64)void': {
      assetId: bigint | number
      newPrice: bigint | number
    }
    'getTokenPrice(uint64)(uint64,uint64,uint64)': {
      assetId: bigint | number
    }
    'removeTokenListing(uint64)void': {
      assetId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account)void': [admin: Uint8Array | string]
    'addTokenListing(uint64,uint64)void': [assetId: bigint | number, initialPrice: bigint | number]
    'updateTokenPrice(uint64,uint64)void': [assetId: bigint | number, newPrice: bigint | number]
    'getTokenPrice(uint64)(uint64,uint64,uint64)': [assetId: bigint | number]
    'removeTokenListing(uint64)void': [assetId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type OracleReturns = {
  'createApplication(account)void': void
  'addTokenListing(uint64,uint64)void': void
  'updateTokenPrice(uint64,uint64)void': void
  'getTokenPrice(uint64)(uint64,uint64,uint64)': TokenPrice
  'removeTokenListing(uint64)void': void
}

/**
 * Defines the types of available calls and state of the Oracle smart contract.
 */
export type OracleTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account)void' | 'createApplication', {
      argsObj: OracleArgs['obj']['createApplication(account)void']
      argsTuple: OracleArgs['tuple']['createApplication(account)void']
      returns: OracleReturns['createApplication(account)void']
    }>
    & Record<'addTokenListing(uint64,uint64)void' | 'addTokenListing', {
      argsObj: OracleArgs['obj']['addTokenListing(uint64,uint64)void']
      argsTuple: OracleArgs['tuple']['addTokenListing(uint64,uint64)void']
      returns: OracleReturns['addTokenListing(uint64,uint64)void']
    }>
    & Record<'updateTokenPrice(uint64,uint64)void' | 'updateTokenPrice', {
      argsObj: OracleArgs['obj']['updateTokenPrice(uint64,uint64)void']
      argsTuple: OracleArgs['tuple']['updateTokenPrice(uint64,uint64)void']
      returns: OracleReturns['updateTokenPrice(uint64,uint64)void']
    }>
    & Record<'getTokenPrice(uint64)(uint64,uint64,uint64)' | 'getTokenPrice', {
      argsObj: OracleArgs['obj']['getTokenPrice(uint64)(uint64,uint64,uint64)']
      argsTuple: OracleArgs['tuple']['getTokenPrice(uint64)(uint64,uint64,uint64)']
      returns: OracleReturns['getTokenPrice(uint64)(uint64,uint64,uint64)']
    }>
    & Record<'removeTokenListing(uint64)void' | 'removeTokenListing', {
      argsObj: OracleArgs['obj']['removeTokenListing(uint64)void']
      argsTuple: OracleArgs['tuple']['removeTokenListing(uint64)void']
      returns: OracleReturns['removeTokenListing(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        adminAccount: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        tokenPrices: Map<OracleKey, TokenPrice>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OracleSignatures = keyof OracleTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OracleNonVoidMethodSignatures = keyof OracleTypes['methods'] extends infer T ? T extends keyof OracleTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Oracle smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OracleSignatures> = OracleTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Oracle smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OracleSignatures> = OracleTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OracleTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = OracleTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OracleCreateCallParams =
  | Expand<CallParams<OracleArgs['obj']['createApplication(account)void'] | OracleArgs['tuple']['createApplication(account)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OracleArgs['obj']['createApplication(account)void'] | OracleArgs['tuple']['createApplication(account)void']> & {method: 'createApplication(account)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type OracleDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OracleCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Oracle smart contract
 */
export abstract class OracleParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OracleCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(account)void':
            return OracleParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the oracle smart contract using the createApplication(account)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<OracleArgs['obj']['createApplication(account)void'] | OracleArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(account)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the addTokenListing(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addTokenListing(params: CallParams<OracleArgs['obj']['addTokenListing(uint64,uint64)void'] | OracleArgs['tuple']['addTokenListing(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addTokenListing(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.initialPrice],
    }
  }
  /**
   * Constructs a no op call for the updateTokenPrice(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateTokenPrice(params: CallParams<OracleArgs['obj']['updateTokenPrice(uint64,uint64)void'] | OracleArgs['tuple']['updateTokenPrice(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateTokenPrice(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.newPrice],
    }
  }
  /**
   * Constructs a no op call for the getTokenPrice(uint64)(uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTokenPrice(params: CallParams<OracleArgs['obj']['getTokenPrice(uint64)(uint64,uint64,uint64)'] | OracleArgs['tuple']['getTokenPrice(uint64)(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTokenPrice(uint64)(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the removeTokenListing(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeTokenListing(params: CallParams<OracleArgs['obj']['removeTokenListing(uint64)void'] | OracleArgs['tuple']['removeTokenListing(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeTokenListing(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the oracle smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OracleFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OracleFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OracleClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OracleClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the oracle smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OracleDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OracleParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OracleCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OracleClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the oracle smart contract using the createApplication(account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<OracleArgs['obj']['createApplication(account)void'] | OracleArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(OracleParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the oracle smart contract using the createApplication(account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<OracleArgs['obj']['createApplication(account)void'] | OracleArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(OracleParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the oracle smart contract using an ABI method call using the createApplication(account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<OracleArgs['obj']['createApplication(account)void'] | OracleArgs['tuple']['createApplication(account)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(OracleParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OracleReturns['createApplication(account)void']) }, appClient: new OracleClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the oracle smart contract
 */
export class OracleClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OracleClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Oracle app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OracleClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OracleNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OracleClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OracleClient> {
    return new OracleClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OracleClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OracleClient> {
    return new OracleClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the oracle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the oracle smart contract using the `addTokenListing(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addTokenListing: (params: CallParams<OracleArgs['obj']['addTokenListing(uint64,uint64)void'] | OracleArgs['tuple']['addTokenListing(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OracleParamsFactory.addTokenListing(params))
    },

    /**
     * Makes a call to the oracle smart contract using the `updateTokenPrice(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateTokenPrice: (params: CallParams<OracleArgs['obj']['updateTokenPrice(uint64,uint64)void'] | OracleArgs['tuple']['updateTokenPrice(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OracleParamsFactory.updateTokenPrice(params))
    },

    /**
     * Makes a call to the oracle smart contract using the `getTokenPrice(uint64)(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTokenPrice: (params: CallParams<OracleArgs['obj']['getTokenPrice(uint64)(uint64,uint64,uint64)'] | OracleArgs['tuple']['getTokenPrice(uint64)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OracleParamsFactory.getTokenPrice(params))
    },

    /**
     * Makes a call to the oracle smart contract using the `removeTokenListing(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeTokenListing: (params: CallParams<OracleArgs['obj']['removeTokenListing(uint64)void'] | OracleArgs['tuple']['removeTokenListing(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OracleParamsFactory.removeTokenListing(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the oracle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the oracle smart contract using the `addTokenListing(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addTokenListing: (params: CallParams<OracleArgs['obj']['addTokenListing(uint64,uint64)void'] | OracleArgs['tuple']['addTokenListing(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OracleParamsFactory.addTokenListing(params))
    },

    /**
     * Makes a call to the oracle smart contract using the `updateTokenPrice(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateTokenPrice: (params: CallParams<OracleArgs['obj']['updateTokenPrice(uint64,uint64)void'] | OracleArgs['tuple']['updateTokenPrice(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OracleParamsFactory.updateTokenPrice(params))
    },

    /**
     * Makes a call to the oracle smart contract using the `getTokenPrice(uint64)(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTokenPrice: (params: CallParams<OracleArgs['obj']['getTokenPrice(uint64)(uint64,uint64,uint64)'] | OracleArgs['tuple']['getTokenPrice(uint64)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OracleParamsFactory.getTokenPrice(params))
    },

    /**
     * Makes a call to the oracle smart contract using the `removeTokenListing(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeTokenListing: (params: CallParams<OracleArgs['obj']['removeTokenListing(uint64)void'] | OracleArgs['tuple']['removeTokenListing(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OracleParamsFactory.removeTokenListing(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the oracle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the oracle smart contract using the `addTokenListing(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addTokenListing: async (params: CallParams<OracleArgs['obj']['addTokenListing(uint64,uint64)void'] | OracleArgs['tuple']['addTokenListing(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OracleParamsFactory.addTokenListing(params))
      return {...result, return: result.return as unknown as (undefined | OracleReturns['addTokenListing(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the oracle smart contract using the `updateTokenPrice(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateTokenPrice: async (params: CallParams<OracleArgs['obj']['updateTokenPrice(uint64,uint64)void'] | OracleArgs['tuple']['updateTokenPrice(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OracleParamsFactory.updateTokenPrice(params))
      return {...result, return: result.return as unknown as (undefined | OracleReturns['updateTokenPrice(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the oracle smart contract using the `getTokenPrice(uint64)(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTokenPrice: async (params: CallParams<OracleArgs['obj']['getTokenPrice(uint64)(uint64,uint64,uint64)'] | OracleArgs['tuple']['getTokenPrice(uint64)(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OracleParamsFactory.getTokenPrice(params))
      return {...result, return: result.return as unknown as (undefined | OracleReturns['getTokenPrice(uint64)(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the oracle smart contract using the `removeTokenListing(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeTokenListing: async (params: CallParams<OracleArgs['obj']['removeTokenListing(uint64)void'] | OracleArgs['tuple']['removeTokenListing(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OracleParamsFactory.removeTokenListing(params))
      return {...result, return: result.return as unknown as (undefined | OracleReturns['removeTokenListing(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OracleClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current oracle app
   */
  state = {
    /**
     * Methods to access global state for the current oracle app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          adminAccount: result.admin_account,
        }
      },
      /**
       * Get the current value of the admin_account key in global state
       */
      adminAccount: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin_account")) as string | undefined },
    },
    /**
     * Methods to access box state for the current oracle app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the token_prices map in box state
       */
      tokenPrices: {
        /**
         * Get all current values of the token_prices map in box state
         */
        getMap: async (): Promise<Map<OracleKey, TokenPrice>> => { return (await this.appClient.state.box.getMap("token_prices")) as Map<OracleKey, TokenPrice> },
        /**
         * Get a current value of the token_prices map by key from box state
         */
        value: async (key: OracleKey): Promise<TokenPrice | undefined> => { return await this.appClient.state.box.getMapValue("token_prices", key) as TokenPrice | undefined },
      },
    },
  }

  public newGroup(): OracleComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a addTokenListing(uint64,uint64)void method call against the oracle contract
       */
      addTokenListing(params: CallParams<OracleArgs['obj']['addTokenListing(uint64,uint64)void'] | OracleArgs['tuple']['addTokenListing(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addTokenListing(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateTokenPrice(uint64,uint64)void method call against the oracle contract
       */
      updateTokenPrice(params: CallParams<OracleArgs['obj']['updateTokenPrice(uint64,uint64)void'] | OracleArgs['tuple']['updateTokenPrice(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateTokenPrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getTokenPrice(uint64)(uint64,uint64,uint64) method call against the oracle contract
       */
      getTokenPrice(params: CallParams<OracleArgs['obj']['getTokenPrice(uint64)(uint64,uint64,uint64)'] | OracleArgs['tuple']['getTokenPrice(uint64)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTokenPrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTokenPrice(uint64)(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a removeTokenListing(uint64)void method call against the oracle contract
       */
      removeTokenListing(params: CallParams<OracleArgs['obj']['removeTokenListing(uint64)void'] | OracleArgs['tuple']['removeTokenListing(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeTokenListing(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the oracle contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OracleComposer
  }
}
export type OracleComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the addTokenListing(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addTokenListing(params?: CallParams<OracleArgs['obj']['addTokenListing(uint64,uint64)void'] | OracleArgs['tuple']['addTokenListing(uint64,uint64)void']>): OracleComposer<[...TReturns, OracleReturns['addTokenListing(uint64,uint64)void'] | undefined]>

  /**
   * Calls the updateTokenPrice(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTokenPrice(params?: CallParams<OracleArgs['obj']['updateTokenPrice(uint64,uint64)void'] | OracleArgs['tuple']['updateTokenPrice(uint64,uint64)void']>): OracleComposer<[...TReturns, OracleReturns['updateTokenPrice(uint64,uint64)void'] | undefined]>

  /**
   * Calls the getTokenPrice(uint64)(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTokenPrice(params?: CallParams<OracleArgs['obj']['getTokenPrice(uint64)(uint64,uint64,uint64)'] | OracleArgs['tuple']['getTokenPrice(uint64)(uint64,uint64,uint64)']>): OracleComposer<[...TReturns, OracleReturns['getTokenPrice(uint64)(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the removeTokenListing(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeTokenListing(params?: CallParams<OracleArgs['obj']['removeTokenListing(uint64)void'] | OracleArgs['tuple']['removeTokenListing(uint64)void']>): OracleComposer<[...TReturns, OracleReturns['removeTokenListing(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the oracle smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OracleComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OracleComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OracleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OracleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OracleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OracleComposerResults<TReturns>>
}
export type OracleComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

