/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"orbital-lending","structs":{"AcceptedCollateral":[{"name":"assetId","type":"uint64"},{"name":"baseAssetId","type":"uint64"},{"name":"marketBaseAssetId","type":"uint64"},{"name":"totalCollateral","type":"uint64"},{"name":"originatingAppId","type":"uint64"}],"AcceptedCollateralKey":[{"name":"assetId","type":"uint64"}],"DebtChange":[{"name":"amount","type":"uint64"},{"name":"changeType","type":"uint8"},{"name":"timestamp","type":"uint64"}],"LoanRecord":[{"name":"borrowerAddress","type":"address"},{"name":"collateralTokenId","type":"uint64"},{"name":"collateralAmount","type":"uint64"},{"name":"lastDebtChange","type":"DebtChange"},{"name":"borrowedTokenId","type":"uint64"},{"name":"principal","type":"uint64"},{"name":"userIndexWad","type":"uint64"}],"MigrationSnapshot":[{"name":"totalDeposits","type":"uint64"},{"name":"totalBorrows","type":"uint64"},{"name":"circulatingLst","type":"uint64"},{"name":"cashOnHand","type":"uint64"},{"name":"borrowIndexWad","type":"uint64"},{"name":"baseTokenId","type":"uint64"},{"name":"commissionPercentage","type":"uint64"},{"name":"lstTokenId","type":"uint64"},{"name":"feePool","type":"uint64"},{"name":"acceptedCollateralsCount","type":"uint64"},{"name":"buyoutTokenId","type":"uint64"},{"name":"liqBonusBps","type":"uint64"},{"name":"currentAccumulatedCommission","type":"uint64"},{"name":"totalCommissionEarned","type":"uint64"},{"name":"totalAdditionalRewards","type":"uint64"},{"name":"activeLoanRecords","type":"uint64"}],"getLoanStatusResult":[{"name":"outstandingDebt","type":"uint64"},{"name":"collateralValueUsd","type":"uint64"},{"name":"collateralAmount","type":"uint64"},{"name":"collateralRatioBps","type":"uint64"},{"name":"liquidationThresholdBps","type":"uint64"},{"name":"eligibleForLiquidation","type":"bool"},{"name":"eligibleForBuyout","type":"bool"}]},"methods":[{"name":"createApplication","args":[{"type":"account","name":"admin","desc":"- The administrative account that will have privileged access"},{"type":"uint64","name":"baseTokenId","desc":"- The asset ID of the base lending token (0 for ALGO)"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Creates the lending application contract with initial configuration","events":[],"recommendations":{}},{"name":"initApplication","args":[{"type":"pay","name":"mbrTxn","desc":"- Payment transaction covering minimum balance requirements"},{"type":"uint64","name":"ltv_bps","desc":"- Loan-to-Value ratio in basis points (e.g., 7500 = 75%)"},{"type":"uint64","name":"liq_threshold_bps","desc":"- Liquidation threshold in basis points (e.g., 8500 = 85%)"},{"type":"uint64","name":"liq_bonus_bps","desc":"- Liquidation bonus in basis points (e.g., 500 = 5% bonus to liquidators)"},{"type":"uint64","name":"origination_fee_bps","desc":"- One-time loan origination fee in basis points"},{"type":"uint64","name":"protocol_share_bps","desc":"- Protocol's share of interest income in basis points"},{"type":"application","name":"oracle_app_id","desc":"- Application ID of the price oracle contract"},{"type":"uint64","name":"buyout_token_id"},{"type":"uint64","name":"additional_rewards_commission_percentage"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initializes the lending protocol with core parameters and configurations","events":[],"recommendations":{}},{"name":"setRateParams","args":[{"type":"uint64","name":"base_bps","desc":"- Base APR in basis points (e.g., 500 = 5%)"},{"type":"uint64","name":"util_cap_bps","desc":"- Utilization cap in basis points (e.g., 8000 = 80%)"},{"type":"uint64","name":"kink_norm_bps","desc":"- Kink normalization point in basis points (e.g., 5000 = 50%)"},{"type":"uint64","name":"slope1_bps","desc":"- Slope to kink in basis points (e.g., 1000 = 10%)"},{"type":"uint64","name":"slope2_bps","desc":"- Slope after kink in basis points (e.g., 2000 = 20%)"},{"type":"uint64","name":"max_apr_bps","desc":"- Maximum APR cap in basis points (0 = no cap)"},{"type":"uint64","name":"max_apr_step_bps","desc":"- Maximum APR step in basis points (0 = no limit)"},{"type":"uint64","name":"ema_alpha_bps","desc":"- EMA smoothing factor in basis points (0 = no smoothing)"},{"type":"uint64","name":"power_gamma_q16","desc":"- Power curve exponent in Q16.16 fixed-point (0 = no power curve)"},{"type":"uint64","name":"scarcity_K_bps","desc":"- Scarcity parameter in basis points (0 = no scarcity)"},{"type":"uint64","name":"rate_model_type","desc":"- Rate model type (0 = kinked, 1 = linear, 2 = power, 3 = asymptote)"},{"type":"uint64","name":"liq_bonus_bps"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Sets the core lending parameters for the protocol","events":[],"recommendations":{}},{"name":"setContractState","args":[{"type":"uint64","name":"state"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setMigrationAdmin","args":[{"type":"account","name":"migrationAdmin","desc":"Account that will temporarily custody balances while migrating."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Sets or updates the migration administrator account used during contract upgrades.","events":[],"recommendations":{}},{"name":"generateLSTToken","args":[{"type":"pay","name":"mbrTxn","desc":"Payment transaction covering asset-creation minimum balance."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Generates a new LST (Liquidity Staking Token) for the base lending token.","events":[],"recommendations":{}},{"name":"optInToLST","args":[{"type":"uint64","name":"lstAssetId","desc":"Asset ID of the pre-existing LST contract."},{"type":"pay","name":"mbrTxn","desc":"Payment covering the opt-in minimum balance requirement."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Opts into an externally created LST token instead of minting a new one.","events":[],"recommendations":{}},{"name":"configureLSTToken","args":[{"type":"axfer","name":"axferTxn","desc":"Asset transfer from the admin delivering LST units to the app."},{"type":"uint64","name":"circulating_lst","desc":"Initial circulating amount to record on-chain."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Configures the LST token by seeding the initial circulating supply.","events":[],"recommendations":{}},{"name":"getOraclePrice","args":[{"type":"uint64","name":"tokenId","desc":"- Asset ID of the token to get price for"}],"returns":{"type":"uint64","desc":"Current price of the token from oracle (in USD micro-units)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Retrieves current price for a token from the configured oracle","events":[],"recommendations":{}},{"name":"addNewCollateralType","args":[{"type":"uint64","name":"collateralTokenId","desc":"- Asset ID of the new collateral type to accept"},{"type":"uint64","name":"collateralBaseTokenId"},{"type":"pay","name":"mbrTxn","desc":"- Payment transaction covering storage minimum balance requirements"},{"type":"uint64","name":"originatingAppId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Adds a new asset type as accepted collateral for borrowing","events":[],"recommendations":{}},{"name":"depositAlgo","args":[{"type":"pay","name":"depositTxn","desc":"- Payment transaction depositing ALGO to the contract"},{"type":"uint64","name":"amount","desc":"- Amount of ALGO being deposited (in microALGOs)"},{"type":"pay","name":"mbrTxn","desc":"- Payment transaction covering transaction fees"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deposits ALGO into the lending pool and receives LST tokens in return","events":[],"recommendations":{}},{"name":"withdrawDeposit","args":[{"type":"axfer","name":"assetTransferTxn","desc":"- Asset transfer transaction sending LST tokens to the contract"},{"type":"uint64","name":"amount","desc":"- Amount of LST tokens to burn for withdrawal"},{"type":"uint64","name":"lstAppId","desc":"- Application ID to determine exchange rate (use current app ID for local rate)"},{"type":"pay","name":"mbrTxn","desc":"- Payment transaction covering transaction fees"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraws deposited assets by burning LST tokens","events":[],"recommendations":{}},{"name":"borrow","args":[{"type":"axfer","name":"assetTransferTxn","desc":"- Asset transfer transaction depositing collateral to the contract"},{"type":"uint64","name":"requestedLoanAmount","desc":"- Amount of base tokens requested for borrowing"},{"type":"uint64","name":"collateralAmount","desc":"- Amount of collateral being deposited"},{"type":"uint64","name":"lstApp","desc":"- Application ID for LST exchange rate calculation"},{"type":"uint64","name":"collateralTokenId","desc":"- Asset ID of the collateral being deposited"},{"type":"pay","name":"mbrTxn","desc":"- Payment transaction covering transaction fees"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Borrows base assets against collateral with interest and fees","events":[],"recommendations":{}},{"name":"addLoanRecordExternal","args":[{"type":"uint64","name":"disbursement"},{"type":"uint64","name":"collateralTokenId"},{"type":"account","name":"borrowerAddress"},{"type":"uint64","name":"collateralAmount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"accrueLoanInterest","args":[{"type":"account","name":"debtor"},{"type":"account","name":"templateReserveAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"current_apr_bps","args":[],"returns":{"type":"uint64","desc":"APR value used for subsequent accrual slices."},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Computes the current borrow APR in basis points, applying smoothing and clamps.","events":[],"recommendations":{}},{"name":"getLoanRecord","args":[{"type":"account","name":"borrowerAddress","desc":"Borrower whose record should be returned."}],"returns":{"type":"(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)","struct":"LoanRecord","desc":"Loan record snapshot stored in the box map."},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Fetches the stored loan record for a borrower (without accrual).","events":[],"recommendations":{}},{"name":"repayLoanAlgo","args":[{"type":"pay","name":"paymentTxn","desc":"- Payment transaction sending ALGO repayment to contract"},{"type":"uint64","name":"repaymentAmount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Repays a loan using ALGO and optionally releases collateral","events":[],"recommendations":{}},{"name":"withdrawPlatformFees","args":[{"type":"account","name":"paymentReceiver","desc":"Address receiving the payout."},{"type":"pay","name":"feeTxn","desc":"Separate payment covering inner-transaction fees."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraws accumulated protocol fees and commission to the admin-controlled account.","events":[],"recommendations":{}},{"name":"buyoutSplitAlgo","args":[{"type":"account","name":"buyer","desc":"- Account that will receive the collateral"},{"type":"account","name":"debtor","desc":"- Account whose loan is being bought out"},{"type":"axfer","name":"premiumAxferTxn","desc":"- Asset transfer transaction with buyout token payment (xUSD)"},{"type":"pay","name":"repayPayTxn","desc":"- ALGO payment transaction with base token repayment"},{"type":"uint64","name":"lstAppId","desc":"- The LST app backing the collateral"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Purchases a borrower's collateral at a premium using ALGO payment","events":[],"recommendations":{}},{"name":"maxWithdrawableCollateralLST","args":[{"type":"uint64","name":"lstAppId","desc":"External LST app backing the collateral."}],"returns":{"type":"uint64","desc":"Maximum withdrawable LST balance for the borrower."},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Computes how much LST collateral the caller can withdraw using live market data.","events":[],"recommendations":{}},{"name":"withdrawCollateral","args":[{"type":"uint64","name":"amountLST","desc":"Amount of LST being withdrawn."},{"type":"uint64","name":"collateralTokenId","desc":"Asset ID of the collateral LST."},{"type":"uint64","name":"lstAppId","desc":"LST application ID used for exchange-rate validation."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Allows borrowers to withdraw a portion of their collateral within safety limits.","events":[],"recommendations":{}},{"name":"getCirculatingLST","args":[],"returns":{"type":"uint64","desc":"Total LST tokens representing all depositor claims"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Returns the current amount of LST tokens in circulation","events":[],"recommendations":{}},{"name":"getTotalDeposits","args":[],"returns":{"type":"uint64","desc":"Total underlying assets available for lending"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Returns the total amount of base assets deposited in the protocol","events":[],"recommendations":{}},{"name":"getAcceptedCollateralsCount","args":[],"returns":{"type":"uint64","desc":"Count of registered collateral asset types"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Returns the number of different collateral types accepted by the protocol","events":[],"recommendations":{}},{"name":"liquidatePartialAlgo","args":[{"type":"account","name":"debtor","desc":"- Account whose loan is being liquidated"},{"type":"pay","name":"repayPay"},{"type":"uint64","name":"repayBaseAmount"},{"type":"uint64","name":"lstAppId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Liquidates an undercollateralized loan using ALGO payment","events":[],"recommendations":{}},{"name":"getLoanStatus","args":[{"type":"account","name":"borrower","desc":"- Account address to get loan status for"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,bool,bool)","struct":"getLoanStatusResult","desc":"Object containing debt amount, collateral value, ratios, and liquidation eligibility"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Retrieves comprehensive status information for a borrower's loan","events":[],"recommendations":{}},{"name":"gas","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"No-op method kept for compatibility with interfaces that expect a gas entry point.","events":[],"recommendations":{}},{"name":"calculateCollateralValueUSD","args":[{"type":"uint64","name":"collateralTokenId","desc":"LST asset representing the collateral."},{"type":"uint64","name":"collateralAmount","desc":"Amount of LST units held."},{"type":"uint64","name":"lstApp","desc":"LST application ID supplying exchange-rate data."}],"returns":{"type":"uint64","desc":"Collateral value denominated in USD micro-units."},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Calculates the USD value of a collateral position using the LST exchange rate and oracle price.","events":[],"recommendations":{}},{"name":"pickupAlgoRewards","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Harvests newly accrued consensus rewards for ALGO-based markets.","events":[],"recommendations":{}},{"name":"migrateCollateralTokenId","args":[{"type":"uint64","name":"collateralTokenId"},{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"migrateContract","args":[{"type":"pay","name":"feeTxn","desc":"Payment covering all inner-transaction fees required for the sweep."}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"MigrationSnapshot"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initiates migration by sweeping balances from this contract to the migration administrator.","events":[],"recommendations":{}},{"name":"acceptMigrationAlgoContract","args":[{"type":"axfer","name":"lstTransferTxn","desc":"LST asset transfer from the migration admin to this contract."},{"type":"pay","name":"algoTxn"},{"type":"(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"MigrationSnapshot","name":"snapshot","desc":"Snapshot of accounting fields that should be set on the new deployment."},{"type":"account","name":"migrationAdmin","desc":"Account expected to have initiated the migration."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Finalises migration by importing balances and restoring accounting on the new contract.","events":[],"recommendations":{}},{"name":"goOnline","args":[{"type":"pay","name":"feePayment","desc":"Payment covering the go-online fee that accompanies the keyreg."},{"type":"byte[]","name":"votePK","desc":"Voting public key for participation."},{"type":"byte[]","name":"selectionPK","desc":"VRF selection key."},{"type":"byte[]","name":"stateProofPK","desc":"State proof key for light-client support."},{"type":"uint64","name":"voteFirst","desc":"First round for which the key is valid."},{"type":"uint64","name":"voteLast","desc":"Last round for which the key is valid."},{"type":"uint64","name":"voteKeyDilution","desc":"Dilution factor for the participation key."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Registers the application account as an Algorand consensus participant.","events":[],"recommendations":{}},{"name":"goOffline","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unregisters the application account from consensus participation.","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":42,"bytes":6},"local":{"ints":0,"bytes":0}},"keys":{"global":{"base_token_id":{"keyType":"AVMString","valueType":"uint64","key":"YmFzZV90b2tlbl9pZA==","desc":"The main lending token used for deposits and borrowing (0 for ALGO)"},"lst_token_id":{"keyType":"AVMString","valueType":"uint64","key":"bHN0X3Rva2VuX2lk","desc":"LST (Liquidity Staking Token) representing depositor shares in the pool"},"circulating_lst":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y2lyY3VsYXRpbmdfbHN0","desc":"Total LST tokens currently in circulation (represents depositor claims)"},"total_deposits":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfZGVwb3NpdHM=","desc":"Total underlying assets deposited in the protocol"},"fee_pool":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmVlX3Bvb2w=","desc":"Protocol fee accumulation pool (admin withdrawable)"},"admin_account":{"keyType":"AVMString","valueType":"address","key":"YWRtaW5fYWNjb3VudA==","desc":"Administrative account with privileged access to protocol functions"},"oracle_app":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3JhY2xlX2FwcA==","desc":"External oracle application for asset price feeds"},"ltv_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bHR2X2Jwcw==","desc":"Loan-to-Value ratio (e.g., 7500 = 75% max borrowing against collateral)"},"liq_threshold_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGlxX3RocmVzaG9sZF9icHM=","desc":"Liquidation threshold (e.g., 8500 = 85% - liquidate when CR falls below)"},"origination_fee_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3JpZ2luYXRpb25fZmVlX2Jwcw==","desc":"One-time fee charged on loan origination (e.g., 100 = 1%)"},"protocol_share_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJvdG9jb2xfc2hhcmVfYnBz","desc":"Protocol's share of interest income (e.g., 2000 = 20%)"},"base_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"YmFzZV9icHM=","desc":"Minimum APR at 0% utilization (basis points per year)."},"util_cap_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXRpbF9jYXBfYnBz","desc":"Hard utilization cap in bps (e.g., 8000 = 80% of deposits may be borrowed)."},"kink_norm_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"a2lua19ub3JtX2Jwcw==","desc":"Kink point on normalized utilization (0..10_000 across [0..util_cap])."},"slope1_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"c2xvcGUxX2Jwcw==","desc":"APR increase from 0 → kink (added to base) over the normalized range."},"slope2_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"c2xvcGUyX2Jwcw==","desc":"APR increase from kink → cap (added after kink) over the normalized range."},"max_apr_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4X2Fwcl9icHM=","desc":"(Optional) Absolute APR ceiling in bps (0 = no cap)."},"ema_alpha_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZW1hX2FscGhhX2Jwcw==","desc":"(Optional) Utilization EMA weight in bps (0..10_000; 0 disables smoothing)."},"max_apr_step_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4X2Fwcl9zdGVwX2Jwcw==","desc":"(Optional) Max APR change per accrual step in bps (0 = no limit)."},"prev_apr_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJldl9hcHJfYnBz","desc":"(Optional, mutable) Last applied APR in bps (for step limiting)."},"util_ema_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXRpbF9lbWFfYnBz","desc":"(Optional, mutable) Stored EMA of normalized utilization in bps."},"rate_model_type":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmF0ZV9tb2RlbF90eXBl","desc":"(Optional) Rate model selector (e.g., 0=kinked, 1=linear, 2=power, 3=asymptote)."},"power_gamma_q16":{"keyType":"AVMString","valueType":"AVMUint64","key":"cG93ZXJfZ2FtbWFfcTE2","desc":"(Optional) Power-curve exponent γ in Q16.16 fixed-point."},"scarcity_K_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"c2NhcmNpdHlfS19icHM=","desc":"(Optional) Strength parameter for asymptotic/scarcity escalator (bps-scaled)."},"total_borrows":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfYm9ycm93cw==","desc":"Total outstanding borrower principal + accrued interest (debt)"},"borrow_index_wad":{"keyType":"AVMString","valueType":"AVMUint64","key":"Ym9ycm93X2luZGV4X3dhZA==","desc":"Multiplicative borrow index (scaled by INDEX_SCALE). Starts at INDEX_SCALE"},"last_accrual_ts":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9hY2NydWFsX3Rz","desc":"Timestamp (ledger seconds) at which borrow_index_wad was last advanced"},"last_apr_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9hcHJfYnBz","desc":"APR (in bps) that applied during [last_accrual_ts, now) before recompute"},"active_loan_records":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWN0aXZlX2xvYW5fcmVjb3Jkcw==","desc":"Total number of active loans in the system"},"accepted_collaterals_count":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWNjZXB0ZWRfY29sbGF0ZXJhbHNfY291bnQ=","desc":"Count of different collateral types accepted by the protocol"},"buyout_token_id":{"keyType":"AVMString","valueType":"uint64","key":"YnV5b3V0X3Rva2VuX2lk","desc":"Total number of active loans in the system"},"liq_bonus_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGlxX2JvbnVzX2Jwcw==","desc":"Liquidation bonus in bps (e.g., 500 = 5% bonus to liquidators)"},"commission_percentage":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29tbWlzc2lvbl9wZXJjZW50YWdl"},"current_accumulated_commission":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3VycmVudF9hY2N1bXVsYXRlZF9jb21taXNzaW9u"},"total_commission_earned":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfY29tbWlzc2lvbl9lYXJuZWQ="},"total_additional_rewards":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfYWRkaXRpb25hbF9yZXdhcmRz"},"cash_on_hand":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y2FzaF9vbl9oYW5k"},"migration_admin":{"keyType":"AVMString","valueType":"address","key":"bWlncmF0aW9uX2FkbWlu","desc":"Dedicated account that temporarily receives balances during migration"},"last_scaled_down_disbursement":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9zY2FsZWRfZG93bl9kaXNidXJzZW1lbnQ=","desc":"Last calculated disbursement amount (for debugging/monitoring)"},"last_max_borrow":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9tYXhfYm9ycm93","desc":"Last calculated maximum borrowable amount in USD (for debugging)"},"last_requested_loan":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9yZXF1ZXN0ZWRfbG9hbg==","desc":"Last requested loan amount in USD (for debugging)"},"debug_diff":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGVidWdfZGlmZg==","desc":"Difference between max borrow and requested (for debugging)"},"params_updated_at":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGFyYW1zX3VwZGF0ZWRfYXQ="},"params_update_nonce":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGFyYW1zX3VwZGF0ZV9ub25jZQ=="},"last_interest_applied":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9pbnRlcmVzdF9hcHBsaWVk"},"delta_debug":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGVsdGFfZGVidWc="},"calculateledSimpleWad":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y2FsY3VsYXRlbGVkU2ltcGxlV2Fk"},"contract_state":{"keyType":"AVMString","valueType":"uint64","key":"Y29udHJhY3Rfc3RhdGU="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"accepted_collaterals":{"keyType":"AcceptedCollateralKey","valueType":"AcceptedCollateral","desc":"Registry of accepted collateral assets with their metadata","prefix":"YWNjZXB0ZWRfY29sbGF0ZXJhbHM="},"loan_record":{"keyType":"address","valueType":"LoanRecord","desc":"Individual borrower loan records with collateral and debt details","prefix":"bG9hbl9yZWNvcmQ="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[5595],"errorMessage":"BAD_COLLATERAL"},{"pc":[4957,6012],"errorMessage":"BAD_DEBT_USD"},{"pc":[2470],"errorMessage":"BAD_EMA_ALPHA"},{"pc":[2454],"errorMessage":"BAD_KINK"},{"pc":[2465],"errorMessage":"BAD_MAX_APR"},{"pc":[5996],"errorMessage":"BAD_REPAY"},{"pc":[2440],"errorMessage":"BAD_UTIL_CAP"},{"pc":[5935],"errorMessage":"BASE_NOT_ALGO"},{"pc":[2955,3011,4285,4580,4916,5153,5348,5358,5499,5567,5597,5624,5634,5881,5965,6132,6149,6481,6491,6570,6648],"errorMessage":"Box must have value"},{"pc":[2940,3457,3488,5460,5491,5842,5873,6186,6217,6607,6638],"errorMessage":"Bytes has valid prefix"},{"pc":[2128],"errorMessage":"COMMISSION_TOO_HIGH"},{"pc":[3154,3296,3517,3989,4601,4808,4906,5337,5541,5618,5944,6682],"errorMessage":"CONTRACT_NOT_ACTIVE"},{"pc":[5658],"errorMessage":"EXCEEDS_MAX_SAFE"},{"pc":[7479],"errorMessage":"INSUFFICIENT_CASH"},{"pc":[3020,5670],"errorMessage":"INSUFFICIENT_COLLATERAL"},{"pc":[2965,2970,2975,2983,3026,3031,3036,3044,3720,4290,4295,4304,4722,4726,4925,5163,5168,5176,5181,5350,5383,5500,5569,5626,5718,5723,5765,5882,5967,6133,6398,6402,6483,6511,6649],"errorMessage":"Index access is out of bounds"},{"pc":[2859],"errorMessage":"LST token not set"},{"pc":[3980,6479],"errorMessage":"Loan record does not exist"},{"pc":[6241],"errorMessage":"NOTHING_TO_SEIZE"},{"pc":[6025],"errorMessage":"NOT_LIQUIDATABLE"},{"pc":[4941,5981],"errorMessage":"NO_DEBT"},{"pc":[5328,5554,5609,5955],"errorMessage":"NO_LOAN"},{"pc":[4897],"errorMessage":"NO_LOAN_RECORD"},{"pc":[1025,1037,1089,1132,1158,1184,1196,1224,1233,1307,1343,1360,1377,1394,1418,1439,1489,1517,1543,1565,1582,1606,1635,1684,1726,1763,1794,1814,1841,1867,1889,1907,1923,1983,2039],"errorMessage":"OnCompletion is not NoOp"},{"pc":[7378],"errorMessage":"Only admin can go online"},{"pc":[6673],"errorMessage":"Only admin can pickup rewards"},{"pc":[6851],"errorMessage":"Only migration admin can migrate"},{"pc":[6797],"errorMessage":"Only migration admin can migrate collateral"},{"pc":[2426,2645,4799],"errorMessage":"UNAUTHORIZED"},{"pc":[2486],"errorMessage":"UNSUPPORTED_MODEL"},{"pc":[3661],"errorMessage":"UTIL_CAP_EXCEEDED"},{"pc":[5580],"errorMessage":"WRONG_COLLATERAL"},{"pc":[5532],"errorMessage":"ZERO_AMOUNT"},{"pc":[6687,6692,6912,6917],"errorMessage":"account funded"},{"pc":[6808,6871,7107],"errorMessage":"account opted into asset"},{"pc":[2908],"errorMessage":"application exists"},{"pc":[2122,2690,2803,2884,3176,3183,3328,3337,3556,3589,4623,4829,5071,5103,6057,7179,7201,7402],"errorMessage":"assert target is match for conditions"},{"pc":[2703,2708,2715,2725],"errorMessage":"asset exists"},{"pc":[2043],"errorMessage":"can only call when creating"},{"pc":[1028,1040,1092,1135,1161,1187,1199,1227,1236,1310,1346,1363,1380,1397,1421,1442,1492,1520,1546,1568,1585,1609,1638,1687,1729,1766,1797,1817,1844,1870,1892,1910,1926,1986],"errorMessage":"can only call when not creating"},{"pc":[2093,2104,2308,2349,2360,2381,2393,2424,2552,2583,2591,2596,2605,2643,2661,2672,2694,2775,2786,2845,2852,2868,2902,3070,3074,3101,3145,3150,3196,3209,3231,3240,3259,3265,3286,3292,3354,3358,3374,3403,3414,3513,3612,3624,3644,3649,3656,3666,3686,3735,3755,3816,3872,3890,3922,3954,3985,4022,4029,4037,4048,4056,4067,4075,4083,4111,4187,4260,4301,4314,4360,4428,4450,4471,4522,4533,4551,4592,4597,4658,4684,4732,4753,4797,4804,4834,4839,4902,4971,4984,5001,5009,5112,5201,5225,5302,5333,5413,5537,5614,5702,5795,5909,5914,5920,5932,5940,6023,6061,6119,6326,6380,6411,6419,6508,6671,6678,6699,6709,6733,6744,6756,6769,6780,6795,6817,6849,6864,6877,6882,6903,6932,6950,6956,6962,6967,6972,6978,6984,6990,6996,7002,7007,7014,7021,7028,7034,7040,7094,7116,7120,7172,7376,7459,7475,7484],"errorMessage":"check GlobalState exists"},{"pc":[3640],"errorMessage":"exceeds LTV limit"},{"pc":[5365,5604,5641,6156,6577],"errorMessage":"mismatched LST app"},{"pc":[1104,1466,1650,1699,1828],"errorMessage":"transaction type is axfer"},{"pc":[1050,1114,1145,1175,1326,1476,1508,1530,1675,1717,1740,1754,1782,1858,1880,1996],"errorMessage":"transaction type is pay"},{"pc":[6567],"errorMessage":"unknown collateral"},{"pc":[3135,3598],"errorMessage":"unsupported collateral"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAGAAHoB5BOwIQ9gKCUpY0dJjENYmFzZV90b2tlbl9pZAQVH3x1DnRvdGFsX2RlcG9zaXRzDXRvdGFsX2JvcnJvd3MNYWRtaW5fYWNjb3VudA5jb250cmFjdF9zdGF0ZQtsb2FuX3JlY29yZBRhY2NlcHRlZF9jb2xsYXRlcmFscw9jaXJjdWxhdGluZ19sc3QTYWN0aXZlX2xvYW5fcmVjb3Jkcwxsc3RfdG9rZW5faWQQYm9ycm93X2luZGV4X3dhZAxsYXN0X2Fwcl9icHMMY2FzaF9vbl9oYW5kCGZlZV9wb29sD21pZ3JhdGlvbl9hZG1pbg9idXlvdXRfdG9rZW5faWQeY3VycmVudF9hY2N1bXVsYXRlZF9jb21taXNzaW9uBAnvUl8EroWfOxphY2NlcHRlZF9jb2xsYXRlcmFsc19jb3VudAttYXhfYXByX2JwcxFsaXFfdGhyZXNob2xkX2JwcwhiYXNlX2Jwcw1saXFfYm9udXNfYnBzF3RvdGFsX2NvbW1pc3Npb25fZWFybmVkGHRvdGFsX2FkZGl0aW9uYWxfcmV3YXJkcwEAB2x0dl9icHMMdXRpbF9jYXBfYnBzDHByZXZfYXByX2Jwcw9sYXN0X2FjY3J1YWxfdHMVY29tbWlzc2lvbl9wZXJjZW50YWdlD3JhdGVfbW9kZWxfdHlwZQ1raW5rX25vcm1fYnBzCnNsb3BlMV9icHMKc2xvcGUyX2JwcxNwYXJhbXNfdXBkYXRlX25vbmNlCAAAAAAAAAAAE29yaWdpbmF0aW9uX2ZlZV9icHMScHJvdG9jb2xfc2hhcmVfYnBzCm9yYWNsZV9hcHAdbGFzdF9zY2FsZWRfZG93bl9kaXNidXJzZW1lbnQNZW1hX2FscGhhX2Jwcw9wb3dlcl9nYW1tYV9xMTYOc2NhcmNpdHlfS19icHMPbGFzdF9tYXhfYm9ycm93E2xhc3RfcmVxdWVzdGVkX2xvYW4RcGFyYW1zX3VwZGF0ZWRfYXQxG0EA+IIWBDsBZl4EAj8QMwRsoQDNBDS4ND4EynoXlQQXwzZiBF7845oEXKwlqQTllqxzBIamsbsEuuTCOAQ+QaSbBBWlsl4EwHmTRASFU8/6BLSnR2YErpn0WwS+0AAkBNIX+EIEsNbo6wTQ5pgSBF8NbwMnEicTggsEbGM3wARw1FH3BNqn9/IEMXLKnQTvC9J6BHF1dQkECsg7XQTQuKfeBE1lg3kEQA4U+wRR7zshNhoAjiMD+APAA4QDdANiA0wDMgMXAwMC5AK/ApUCZAJHAi8CHgIIAe4B0gGgAYsBcwFiAVEBQAEcANIAyQCtAKEAhwBtAEIADgACIkMxGRREMRhEiBkKI0MxGRREMRhEMRYjCUk4ECMSRDYaAVcCADYaAlcCADYaA1cCADYaBBc2GgUXNhoGF4gYiyNDMRkURDEYRDEWgQIJSTgQgQQSRDEWIwlJOBAjEkQ2GgE2GgIXwByIF34jQzEZFEQxGEQxFiMJSTgQIxJEiBY4KUxQsCNDMRkURDEYRDYaARcxFiMJSTgQIxJEiBXnI0MxGRREMRhEiBVdI0MxGRREMRhENhoBNhoCFzYaAxeIFN0WKUxQsCNDMRkURDEYRCNDMRkURDEYRDYaARfAHIgUZU8GFk8GFk8GFk8GFk8GFicbIk8IVCcbIk8IVE8GTwZQTwVQTwRQTwNQTwJQTCJTgcECTFQpTFCwI0MxGRREMRhENhoBF8AcMRYjCUk4ECMSRDYaAhc2GgMXiBHoI0MxGRREMRhEiBHWFilMULAjQzEZFEQxGESIEcAWKUxQsCNDMRkURDEYRIgRqRYpTFCwI0MxGRREMRhENhoBFzYaAhc2GgMXiBAOI0MxGRREMRhENhoBF4gPLBYpTFCwI0MxGRREMRhENhoBF8AcNhoCF8AcMRaBAglJOBCBBBJEMRYjCUk4ECMSRDYaAxeIDUQjQzEZFEQxGEQ2GgEXwBwxFiMJSTgQIxJEiAzKI0MxGRREMRhEMRYjCUk4ECMSRDYaAReIC+QjQzEZFEQxGEQ2GgEXwByIC8cpTFCwI0MxGRREMRhEiAmEFilMULAjQzEZFEQxGEQ2GgEXwBw2GgIXwByICUAjQzEZFEQxGEQ2GgEXNhoCNhoDF8AcNhoEF4gI/CNDMRkURDEYRDEWgQIJSTgQgQQSRDYaARc2GgIXNhoDFzYaBDEWIwlJOBAjEkSIByAjQzEZFEQxGEQxFoECCUk4EIEEEkQ2GgEXNhoCFzEWIwlJOBAjEkSIBhYjQzEZFEQxGEQxFoECCUk4ECMSRDYaARcxFiMJSTgQIxJEiAVjI0MxGRREMRhENhoBNhoCMRYjCUk4ECMSRDYaA4gE+SNDMRkURDEYRDYaAYgEQxYpTFCwI0MxGRREMRhEMRYjCUk4EIEEEkQ2GgEXiAPoI0MxGRREMRhENhoBFzEWIwlJOBAjEkSIA4gjQzEZFEQxGEQxFiMJSTgQIxJEiAMAI0MxGRREMRhENhoBF8AciALcI0MxGRREMRhENhoBF4gCwSNDMRkURDEYRDYaARc2GgIXNhoDFzYaBBc2GgUXNhoGFzYaBxc2GggXNhoJFzYaChc2GgsXNhoMF4gBtSNDMRkURDEYRDEWIwlJOBAjEkQ2GgEXNhoCFzYaAxc2GgQXNhoFFzYaBhfAMjYaBxc2GggXiAAyI0MxGRREMRgURDYaARfAHDYaAheIAAIjQ4oCACcEi/5ni/8WKExnJw+L/mcnBScmZ4mKCQAxACInBGVEEkSL9zgAIicEZUQSQQEui/c4CIGAtRgSQQEiI0SL/4FkDkQnHIv4ZycWi/lnJyeL+2cnFCJnJw4iZycIImcqImcnCSJnJyiL/GcnKYv9ZycKgAgAAAAAAAAAY2cnF4EyZycdgcA+ZysiZychImcnIoGIJ2cnIyRnJySB0A9nJxWB8C5nJyoiZycrImcnHoEyZ4AMdXRpbF9lbWFfYnBzImcnLCJnJy0iZycuImcnLyJngApkZWJ1Z19kaWZmImcnMDIHZyclImcnCyEFZycfMgdnIicXZUQnDExni/4WJxBMZycYi/pnJxkiZycRImcnIIv/ZycNImcnGiJnIihlRBdBABexMgoiKGVEFyKyErIRshSBBLIQJLIBsyInEGVEF0EAGLEyCiInEGVEFyKyErIRshSBBLIQJLIBs4kiQv7bigwAMQAiJwRlRBJEi/VBALuL9SUOQQC0I0SL9kEAqYv2JQxBAKIjRIv5QQAGi/mL9A9Ei/slDkSL/kEACYv+gf8BEkEAfiNEJxeL9GcnHYv1Zycii/ZnJyOL92cnJIv4ZycVi/lngBBtYXhfYXByX3N0ZXBfYnBzi/pnJyGL/mcnGIv/ZyInJWVEIwgnJUxnJzAyB2cnK4v7Zycsi/xnJy2L/WciJxVlREEAFyInHmVEIicVZUQNQQAJIicVZUQnHkxniSJC/38iQv9bIkL/SYoBAIv/FicFTGeJigEAMQAiJwRlRBJEJw+L/2eJigEAMQAiJwRlRBJEi/84ACInBGVEEkEAVYv/OAiB8JwGEkEASSNEIihlRBexMgpLAXEAREsCcQFEMgpLBHEDRIABY0xQTwVxA0SAAWNMULImsiWyKSKyJLIjsiKyAIEDshAksgGztDwWJwpMZ4kiQv+0igIAMQAiJwRlRBJEi/84ACInBGVEEkEAKYv/OAiB0A8SQQAeI0SL/hYnCkxnsTIKIrISi/6yEbIUgQSyECSyAbOJIkL/34oCADEAIicEZUQSRCInCmVEF4v+OBESRIv+OAAiJwRlRBJBABKL/jgUMgoSQQAII0QnCIv/Z4kiQv/1igEBIicpZURJcghFAUSxgASsE+AEshqL/7IashiBBrIQJLIBs7Q+SVcABCkSRIEMW4mKAgAnB4v+UEm+REmBGFuL/whLAVcACEsCVwgISwNXEAhPAxZPBFcgCE8ETwRQTwNQTwJQTFC/iYoCACcHi/5QSb5ESYEYW0mL/w9Ei/8JSwFXAAhLAlcICEsDVxAITwMWTwRXIAhPBE8EUE8DUE8CUExQv4mKBAAiKGVFAUQiKGVEi/yL/VBMUCcmUIv/UCcHi/xQSU8CvyInFGVEIwgnFExnsTIKSYv8FyKyErIRshSyAIEEshAksgGzvUUBRImKAwAiKGVFAUQiJwVlRBcjEkSL/TgHMgoSQQBui/04CIv+EkEAZCNEi/84CCQSRIv+iBCniAR8SCIqZURAADeL/rExACInCmVEF0sCshKyEbIUgQSyECSyAbMiJwhlRAgnCExnIiplRIv+CCpMZ4gC9icMTGeJIicIZUQlHSIqZUSXi/4dJZdC/7ciQv+ZigQAIicKZUQXIicFZUQXIxJEi/w4FDIKEkEAwIv8OBGLABJBALaL/DgSi/0SQQCsI0SL/zgIgbgXEkSIA+dIi/4yCBJBAE4iJwhlRCIqZUSL/R1PApdJiBADMgoiKGVEF3AASEsBD0SxMQBLAbIIsgcjshAksgGzIicIZUSL/QknCExnIiplREwJKkxniAJJJwxMZ4mxJxKyGov+shiBBrIQJLIBs7Q+SVcEAExXAAQpEkQXsScTshqL/rIYgQayECSyAbO0PklXBABMVwAEKRJEF4v9HU8Cl0L/eiJC/1GKBgCAAEkiJwVlRBcjEkQnBjEAUL1JTwJIiAMpSEEBQTEAiAQHgShbi/wIjACL/zgIgaAfEkSL+jgUMgoSQQEdi/o4Eov8EkEBE4v6OBGL/hcSQQEII0QnB4v+UL1FAUSL/osAi/2IC4MiJxxlRAslCicuSwFnIihlRIj9I4v7HSEElycvSwFnD0QiKmVEIicdZUQdJZciK2VEi/sID0QiJydlRIv7CyUKi/tLAQlJTgKMASInDmVECCcOTGcnKkxniwJBAIAxAEmIA2BLAYgCM4sBSU4DCEsBVyAITwKBKFuL/AgWIihlRE8EFjIHFkwnG1BMUE8EFiInC2VEFksGTwZQTwVQTwNQTwNQTwJQTFAnBk8CUEy/i/6L/Ij8szEAsYsBSU4CsgiyByOyECSyAbNJiA5HIitlRAgrTGeIALgnDExniTEAiwGL/k8Ci/yIABWL/ov8iPx4Qv/CIkL+9Yv8jABC/sWKBACL/xYiKGVEi/wWMgcWSwEnG1BMUCInC2VEFov+i/1QTwVQTwJQTwNQTwJQTFAnBov+UEy/IicJZUQjCCcJTGeJigQAi/yL/Yv+i/+I/6+L/Yv/iPwSIitlRIv8CCtMZ4gALCcMTGeJigIAJwaL/lC9RQFEIicFZUQXIxJEiAFbSIv+iAEUSIgABScMTGeJigABgABHBiIqZUxJTwJEIitlTE4CRCInHWVMTgJEQACYIowAIichZURAAIMiJxdlRCInImVMSU4CTgNEIicjZUyMBUQiJyRlTIwGRIsAD0EAPIsFiwAdTwOXCIwBIicVZUxJTgKMBESLAYwCQQAQiwFJiwQNTIwCQQAEiwSMAosCjAEnHosBSU4CZ4wAiYsATwJJTgIJJU8CCYsGTwIdTwOLBQhOAk8DlwiMAUL/riInF2VEjAFC/8qLB4sJHSWXSYwDQAAGIowAQv9YiwhJiwNJTgIOSwFPA08CTSUdTwKXjABC/z6KAQKL/4FJW0lAAAYii/9PAokiJwtlRIsAHYv/gVFbl4v/TwKJigEBJwaL/1BJvkSI/81JVyAISwFXKAgiKGVETwNXMBFLBBYiJwtlRBaL/08GUE8FUE8DUE8DUE8CUExQTwJMv4mKAAGAAEcDMgdJIicfZUxJTgJOA0QOQQAEIowAiYsEiwUJSYwAQACnIowCgBVjYWxjdWxhdGVsZWRTaW1wbGVXYWSLAklOAmdAAAknH4sEZyKMAIkiJwtlREmLAh0hBZcIJwtMZyIrZUxJTgKMA0QijAFBAAqLA4sCHSEFl4wBIicoZUQlTAmLAUlPAh0ll0oJiwNLAwgrTGeAFWxhc3RfaW50ZXJlc3RfYXBwbGllZEsDZyIqZURPAggqTGciJw5lRAgnDkxnJx+LBGeMAIkiJwxlRIsAHYGA54QPlyEFHSWXjAJC/0SKAQEnBov/UL5EiYoCAIAAIihlRQFEIicFZUQXIxJEi/44BzIKEkEAqov+OAiL/xJBAKAjRIj+4UgxAIj/wkgxAIj/vIj+bEyL/0sBDkSL/wlJjAAiK2VEi/8JK0xni/+ICt5AAC0nBjEAULxIIicJZUQjCScJTGexMQBMSYEgW0yBKFuyErIRshSBBLIQJLIBs4kxAExJVyAITFcoCCIoZUSL/xYyBxZMgAECUExQiwAWIicLZUQWTwZPBlBPBVBPA1BPA1BPAlBMUCcGMQBQTL+JIkL/XYoCAIAAMQAiJwRlRBJEIicFZUQXIxJEi/84BzIKEkEAOYv/OAgkEkEAMCNEIicOZUQiJxFlRAhJjABBAByxiwBJsgiL/rIHI7IQJLIBs4gKKScOImcnESJniSJC/82KBQCAAEcEJwaL/FBHAr1FAUQiJwVlRBcjEkSI/cZIvkxJTwJESYEoW0lPAklXIAhJTgJOA4j9RkhJTgNJRExPAov/iAZFSU8CiAFUSURMJR1PApdJIkwiJxZlRA1BAA6LCyUdIicWZUSXJQmMDIsKiwwdJZciJxBlRBeMACInEGVEiPe6SYwBTCEEHYwDjAJAAQEijASL/TgAi/sSQQDwi/04FDIKEkEA5ov9OBGLABJBANyL/TgSiwQSQQDSI0SL/jgAi/sSQQDCi/44BzIKEkEAuIv+OAiLCRJBAK4jRIsFvEgiJwllRCMJJwlMZ7GLBoEgW4sHSU4CshKyEYv7shSBBLIQJLIBsycHiwhQSb5ESYEYW08DCUsBVwAISwJXCAhPAhZLA1cQCE8EVyAITwRPBFBPAlBPAlBMUL8iK2VEiwlJTgIJK0xniAi+iwRJgQIKsSInBGVESwGyEosASU4DshGyFIEEshAksgGzsU8CTAmyErIRi/yyFIEEshAksgGziPsRJwxMZ4kiQv9PIkL/K4sCiwOLAZeMBEL+9ooBASIoZUSI9pWL/x0hBJeJigEBIoAASScGMQBQvUUBRCInBWVEFyMSRIj8F0gnBjEAUL5ESVcgCCcHTFC+RIEgW4v/EkSI+5VMSU4CQAAGgShbjACJSVcgCElOAowAgShbi/+IBIRJjAGLA4j/kSUdIiccZUSXSYwCDkEABCKMAImLAYsCCbEnErIai/+yGIEGshAksgGztD5JVwQATFcABCkSRBexJxOyGov/shiBBrIQJLIBs7Q+SVcEAExXAAQpEkQXJweLAFC+RFcICIj1zU8DIQQdTwKXTwIdTwKXjACJigMAIoAASYv9RCInBWVEFyMSRDEAJwYxAFBHAr1FAUSI+z5ISb5MSU4CTgNESVcgCE4CgSBbi/4SRIv+FklOAicHTFBJvUUBRL5EgSBbi/8SREm9RQFEIicFZUQXIxJEiPr+SL5ESVcgCCcHTFC+RIEgW4v/EkSI+oFMSU4CQABwgShbi/0PRIsFSYEoW4v9SwEMRIv9CbGL/bISi/6yEYsDSU4CshSBBLIQJLIBsxYiKGVEi/0WMgcWTIABA1BMUEsEV0kITwVXUQhPBYsHUE8FUE8DUE8DUE8CUExQiwRMv4sGi/2I9T2I+SknDExniUlXIAhJTgKMAIEoW4v/iAMGSYwBiwiI/hMlHSInHGVEl0mMAg5BAAQiQv9niwGLAgmxJxKyGov/shiBBrIQJLIBs7Q+SVcEAExXAAQpEkQXsScTshqL/7IYgQayECSyAbO0PklXBABMVwAEKRJEFycHiwBQvkRXCAiI9E9PAyEEHU8Cl08CHU8Cl0L/BiInCGVEiSIqZUSJIicUZUSJigQAgABHByIoZUQXFEQiJwVlRBcjEkQnBov8UEcCvUUBRIj5rUi+TElPAkRJVyAITEmBKFtMiPkzTElEi/5BAdyL/osNDkEB1CNEiwqLC4v/iAIliw2I/TVJREwlHU8ClyInFmVEDkSL/TgAMQASQQGni/04BzIKEkEBnYv9OAiL/hJBAZMjRCIoZUSI856MAIsNSYECCkxLAU8CTUmMAiKMBIv+DIv+jAZBAAyL/osCSU4CCYwEjAaLBosAHSEElyInGGVEJQgdJZcnB4sKUEm+RFcICIjzVE8CIQQdTwKXTL5EgSBbi/8SRLEnErIai/+yGIEGshAksgGztD5JVwQATFcABCkSRBexJxOyGov/shiBBrIQJLIBs7Q+SVcEAExXAAQpEkQXTgIdTwKXSYwHiwsNQQAEiwuMB4sHSUSxMQCLCYEgW0mMAU8CshKyEbIUgQSyECSyAbOLBEEAFLExALIHiwRJsggjshAksgGziASWiwuLB0lOAgmMBYsNiwZJTgMJSU4DjAOLCkyI8wYiK2VESwEJK0xniARcQAA4iwVBAByxiwVJshKLAbIRi/yyFIEEshAksgGziwpMiPLViwi8SCInCWVEIwknCUxniPayJwxMZ4mLDElXACBMVyAIiwUWIihlRIsDFiInC2VEFosGFjIHFkyAAQRQTFBPBk8GUE8FUExQTwNQTwJQTFCLCEy/Qv+4IkL+aiJC/imKAQcnBov/UEm9RQFEvkRJVyAIJwdMUL5EiPeVSEyI9ypJgShbIicWZURPAlcgCE8EgSBbSwNMiAAeSSULSwQKSUsDDEsBSwQNTwZPBE8GTwVPBk8GTwaJigMBJweL/VBJvUUBREm+RIEgW4v/EkSxJxKyGov/shiBBrIQJLIBs7Q+SVcEAExXAAQpEkQXsScTshqL/7IYgQayECSyAbO0PklXBABMVwAEKRJEF4v+HU8Cl0y+RFcICIjxUB0hBJeJigAAgAAxACInBGVEEkQiJwVlRBcjEkQyCnMARDIKcwFECUkiJw1lRA5BAAGJIicNZUSLAUwJSYwAJQ5BAAGJiwBJiALTIicgZURLAR2BZJciJxFlREsBCCcRTGciJxllREsBCCcZTGcJIicaZURLAQgnGkxnIiplRAgqTGeJigIAMQAiJw9lRBJEMgqL/nAATElPAkRBABixIicPZUSLALISi/6yEbIUgQSyECSyAbOJigEBgABJMQAiJw9lRBJEgQKI73aIAkYiJwplRBcyCkxwAESxIicPZUQiJwplRBdPArISshGyFIEEshAksgGzIihlRBdAALcyCnMARDIKcwFECSQJSYwAQQATsSInD2VEiwCyCLIHI7IQJLIBsyInFGVEFiInDWVEFiInCGVEFiIqZUQWIitlRBYiJxplRBYiJxllRBYiJxFlRBYiJw5lRBYiJwtlRBYiKGVEFxYiJwplRBcWIicQZUQXFiInIGVEFiInGGVEFiInCWVEFk8MTwxQTwxQTwxQTwdQTwZQTwNQTwRQTwRQTwdQTwNQTwJQTwJQTwJQTwJQTFCMAIkiKGVEFzIKTHAATElOAowBREH/W7EiJw9lRCIoZUQXiwGyErIRshSBBLIQJLIBs0L/PYoEAIv8OACL/xJBANGL/DgUMgoSQQDHi/w4ESInCmVEFxJBALkjRIv9OACL/xJBAKmL/TgHMgoSQQCfI0SL/oEYWycNTGeL/iJbKkxni/6BEFsnCExni/6BCFsrTGeL/oFwWycaTGeL/oFoWycZTGeL/oFgWycRTGeL/oFAWycOTGeL/oEgWycLTGeL/oFIWycUTGeL/oEoWxYoTGeL/oE4WxYnCkxni/6BUFsWJxBMZ4v+gTBbJyBMZ4v+gVhbJxhMZ4v+gXhbJwlMZycFgAgAAAAAAAAAAWeJIkL/XiJC/0SKBwAxACInBGVEEkQyE4v5OAcyChJBAC+L+TgIiwASQQAlI0Sxi/+yDov+sg2L/bIMi/yyP4v7sguL+rIKgQKyEIsAsgGziSJC/9ixgQKyECSyAbOJigEAIicNZUSL/wgnDUxniYoBACInDWVEi/8PRCInDWVEi/8JJw1MZ4k=","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AcceptedCollateral = {
  assetId: bigint,
  baseAssetId: bigint,
  marketBaseAssetId: bigint,
  totalCollateral: bigint,
  originatingAppId: bigint
}


/**
 * Converts the ABI tuple representation of a AcceptedCollateral to the struct representation
 */
export function AcceptedCollateralFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AcceptedCollateral, APP_SPEC.structs) as AcceptedCollateral
}

export type AcceptedCollateralKey = {
  assetId: bigint
}


/**
 * Converts the ABI tuple representation of a AcceptedCollateralKey to the struct representation
 */
export function AcceptedCollateralKeyFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AcceptedCollateralKey, APP_SPEC.structs) as AcceptedCollateralKey
}

export type DebtChange = {
  amount: bigint,
  changeType: number,
  timestamp: bigint
}


/**
 * Converts the ABI tuple representation of a DebtChange to the struct representation
 */
export function DebtChangeFromTuple(abiTuple: [bigint, number, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.DebtChange, APP_SPEC.structs) as DebtChange
}

export type LoanRecord = {
  borrowerAddress: string,
  collateralTokenId: bigint,
  collateralAmount: bigint,
  lastDebtChange: DebtChange,
  borrowedTokenId: bigint,
  principal: bigint,
  userIndexWad: bigint
}


/**
 * Converts the ABI tuple representation of a LoanRecord to the struct representation
 */
export function LoanRecordFromTuple(abiTuple: [string, bigint, bigint, [bigint, number, bigint], bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.LoanRecord, APP_SPEC.structs) as LoanRecord
}

export type MigrationSnapshot = {
  totalDeposits: bigint,
  totalBorrows: bigint,
  circulatingLst: bigint,
  cashOnHand: bigint,
  borrowIndexWad: bigint,
  baseTokenId: bigint,
  commissionPercentage: bigint,
  lstTokenId: bigint,
  feePool: bigint,
  acceptedCollateralsCount: bigint,
  buyoutTokenId: bigint,
  liqBonusBps: bigint,
  currentAccumulatedCommission: bigint,
  totalCommissionEarned: bigint,
  totalAdditionalRewards: bigint,
  activeLoanRecords: bigint
}


/**
 * Converts the ABI tuple representation of a MigrationSnapshot to the struct representation
 */
export function MigrationSnapshotFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MigrationSnapshot, APP_SPEC.structs) as MigrationSnapshot
}

export type GetLoanStatusResult = {
  outstandingDebt: bigint,
  collateralValueUsd: bigint,
  collateralAmount: bigint,
  collateralRatioBps: bigint,
  liquidationThresholdBps: bigint,
  eligibleForLiquidation: boolean,
  eligibleForBuyout: boolean
}


/**
 * Converts the ABI tuple representation of a getLoanStatusResult to the struct representation
 */
export function GetLoanStatusResultFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, boolean, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.getLoanStatusResult, APP_SPEC.structs) as GetLoanStatusResult
}

/**
 * The argument types for the OrbitalLending contract
 */
export type OrbitalLendingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account,uint64)void': {
      /**
       * - The administrative account that will have privileged access
       */
      admin: Uint8Array | string
      /**
       * - The asset ID of the base lending token (0 for ALGO)
       */
      baseTokenId: bigint | number
    }
    'initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void': {
      /**
       * - Payment transaction covering minimum balance requirements
       */
      mbrTxn: AppMethodCallTransactionArgument
      /**
       * - Loan-to-Value ratio in basis points (e.g., 7500 = 75%)
       */
      ltvBps: bigint | number
      /**
       * - Liquidation threshold in basis points (e.g., 8500 = 85%)
       */
      liqThresholdBps: bigint | number
      /**
       * - Liquidation bonus in basis points (e.g., 500 = 5% bonus to liquidators)
       */
      liqBonusBps: bigint | number
      /**
       * - One-time loan origination fee in basis points
       */
      originationFeeBps: bigint | number
      /**
       * - Protocol's share of interest income in basis points
       */
      protocolShareBps: bigint | number
      /**
       * - Application ID of the price oracle contract
       */
      oracleAppId: bigint
      buyoutTokenId: bigint | number
      additionalRewardsCommissionPercentage: bigint | number
    }
    'setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': {
      /**
       * - Base APR in basis points (e.g., 500 = 5%)
       */
      baseBps: bigint | number
      /**
       * - Utilization cap in basis points (e.g., 8000 = 80%)
       */
      utilCapBps: bigint | number
      /**
       * - Kink normalization point in basis points (e.g., 5000 = 50%)
       */
      kinkNormBps: bigint | number
      /**
       * - Slope to kink in basis points (e.g., 1000 = 10%)
       */
      slope1Bps: bigint | number
      /**
       * - Slope after kink in basis points (e.g., 2000 = 20%)
       */
      slope2Bps: bigint | number
      /**
       * - Maximum APR cap in basis points (0 = no cap)
       */
      maxAprBps: bigint | number
      /**
       * - Maximum APR step in basis points (0 = no limit)
       */
      maxAprStepBps: bigint | number
      /**
       * - EMA smoothing factor in basis points (0 = no smoothing)
       */
      emaAlphaBps: bigint | number
      /**
       * - Power curve exponent in Q16.16 fixed-point (0 = no power curve)
       */
      powerGammaQ16: bigint | number
      /**
       * - Scarcity parameter in basis points (0 = no scarcity)
       */
      scarcityKBps: bigint | number
      /**
       * - Rate model type (0 = kinked, 1 = linear, 2 = power, 3 = asymptote)
       */
      rateModelType: bigint | number
      liqBonusBps: bigint | number
    }
    'setContractState(uint64)void': {
      state: bigint | number
    }
    'setMigrationAdmin(account)void': {
      /**
       * Account that will temporarily custody balances while migrating.
       */
      migrationAdmin: Uint8Array | string
    }
    'generateLSTToken(pay)void': {
      /**
       * Payment transaction covering asset-creation minimum balance.
       */
      mbrTxn: AppMethodCallTransactionArgument
    }
    'optInToLST(uint64,pay)void': {
      /**
       * Asset ID of the pre-existing LST contract.
       */
      lstAssetId: bigint | number
      /**
       * Payment covering the opt-in minimum balance requirement.
       */
      mbrTxn: AppMethodCallTransactionArgument
    }
    'configureLSTToken(axfer,uint64)void': {
      /**
       * Asset transfer from the admin delivering LST units to the app.
       */
      axferTxn: AppMethodCallTransactionArgument
      /**
       * Initial circulating amount to record on-chain.
       */
      circulatingLst: bigint | number
    }
    'getOraclePrice(uint64)uint64': {
      /**
       * - Asset ID of the token to get price for
       */
      tokenId: bigint | number
    }
    'addNewCollateralType(uint64,uint64,pay,uint64)void': {
      /**
       * - Asset ID of the new collateral type to accept
       */
      collateralTokenId: bigint | number
      collateralBaseTokenId: bigint | number
      /**
       * - Payment transaction covering storage minimum balance requirements
       */
      mbrTxn: AppMethodCallTransactionArgument
      originatingAppId: bigint | number
    }
    'depositAlgo(pay,uint64,pay)void': {
      /**
       * - Payment transaction depositing ALGO to the contract
       */
      depositTxn: AppMethodCallTransactionArgument
      /**
       * - Amount of ALGO being deposited (in microALGOs)
       */
      amount: bigint | number
      /**
       * - Payment transaction covering transaction fees
       */
      mbrTxn: AppMethodCallTransactionArgument
    }
    'withdrawDeposit(axfer,uint64,uint64,pay)void': {
      /**
       * - Asset transfer transaction sending LST tokens to the contract
       */
      assetTransferTxn: AppMethodCallTransactionArgument
      /**
       * - Amount of LST tokens to burn for withdrawal
       */
      amount: bigint | number
      /**
       * - Application ID to determine exchange rate (use current app ID for local rate)
       */
      lstAppId: bigint | number
      /**
       * - Payment transaction covering transaction fees
       */
      mbrTxn: AppMethodCallTransactionArgument
    }
    'borrow(axfer,uint64,uint64,uint64,uint64,pay)void': {
      /**
       * - Asset transfer transaction depositing collateral to the contract
       */
      assetTransferTxn: AppMethodCallTransactionArgument
      /**
       * - Amount of base tokens requested for borrowing
       */
      requestedLoanAmount: bigint | number
      /**
       * - Amount of collateral being deposited
       */
      collateralAmount: bigint | number
      /**
       * - Application ID for LST exchange rate calculation
       */
      lstApp: bigint | number
      /**
       * - Asset ID of the collateral being deposited
       */
      collateralTokenId: bigint | number
      /**
       * - Payment transaction covering transaction fees
       */
      mbrTxn: AppMethodCallTransactionArgument
    }
    'addLoanRecordExternal(uint64,uint64,account,uint64)void': {
      disbursement: bigint | number
      collateralTokenId: bigint | number
      borrowerAddress: Uint8Array | string
      collateralAmount: bigint | number
    }
    'accrueLoanInterest(account,account)void': {
      debtor: Uint8Array | string
      templateReserveAddress: Uint8Array | string
    }
    'current_apr_bps()uint64': Record<string, never>
    'getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)': {
      /**
       * Borrower whose record should be returned.
       */
      borrowerAddress: Uint8Array | string
    }
    'repayLoanAlgo(pay,uint64)void': {
      /**
       * - Payment transaction sending ALGO repayment to contract
       */
      paymentTxn: AppMethodCallTransactionArgument
      repaymentAmount: bigint | number
    }
    'withdrawPlatformFees(account,pay)void': {
      /**
       * Address receiving the payout.
       */
      paymentReceiver: Uint8Array | string
      /**
       * Separate payment covering inner-transaction fees.
       */
      feeTxn: AppMethodCallTransactionArgument
    }
    'buyoutSplitAlgo(account,account,axfer,pay,uint64)void': {
      /**
       * - Account that will receive the collateral
       */
      buyer: Uint8Array | string
      /**
       * - Account whose loan is being bought out
       */
      debtor: Uint8Array | string
      /**
       * - Asset transfer transaction with buyout token payment (xUSD)
       */
      premiumAxferTxn: AppMethodCallTransactionArgument
      /**
       * - ALGO payment transaction with base token repayment
       */
      repayPayTxn: AppMethodCallTransactionArgument
      /**
       * - The LST app backing the collateral
       */
      lstAppId: bigint | number
    }
    'maxWithdrawableCollateralLST(uint64)uint64': {
      /**
       * External LST app backing the collateral.
       */
      lstAppId: bigint | number
    }
    'withdrawCollateral(uint64,uint64,uint64)void': {
      /**
       * Amount of LST being withdrawn.
       */
      amountLst: bigint | number
      /**
       * Asset ID of the collateral LST.
       */
      collateralTokenId: bigint | number
      /**
       * LST application ID used for exchange-rate validation.
       */
      lstAppId: bigint | number
    }
    'getCirculatingLST()uint64': Record<string, never>
    'getTotalDeposits()uint64': Record<string, never>
    'getAcceptedCollateralsCount()uint64': Record<string, never>
    'liquidatePartialAlgo(account,pay,uint64,uint64)void': {
      /**
       * - Account whose loan is being liquidated
       */
      debtor: Uint8Array | string
      repayPay: AppMethodCallTransactionArgument
      repayBaseAmount: bigint | number
      lstAppId: bigint | number
    }
    'getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)': {
      /**
       * - Account address to get loan status for
       */
      borrower: Uint8Array | string
    }
    'gas()void': Record<string, never>
    'calculateCollateralValueUSD(uint64,uint64,uint64)uint64': {
      /**
       * LST asset representing the collateral.
       */
      collateralTokenId: bigint | number
      /**
       * Amount of LST units held.
       */
      collateralAmount: bigint | number
      /**
       * LST application ID supplying exchange-rate data.
       */
      lstApp: bigint | number
    }
    'pickupAlgoRewards()void': Record<string, never>
    'migrateCollateralTokenId(uint64,pay)void': {
      collateralTokenId: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      /**
       * Payment covering all inner-transaction fees required for the sweep.
       */
      feeTxn: AppMethodCallTransactionArgument
    }
    'acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void': {
      /**
       * LST asset transfer from the migration admin to this contract.
       */
      lstTransferTxn: AppMethodCallTransactionArgument
      algoTxn: AppMethodCallTransactionArgument
      /**
       * Snapshot of accounting fields that should be set on the new deployment.
       */
      snapshot: MigrationSnapshot
      /**
       * Account expected to have initiated the migration.
       */
      migrationAdmin: Uint8Array | string
    }
    'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': {
      /**
       * Payment covering the go-online fee that accompanies the keyreg.
       */
      feePayment: AppMethodCallTransactionArgument
      /**
       * Voting public key for participation.
       */
      votePk: Uint8Array
      /**
       * VRF selection key.
       */
      selectionPk: Uint8Array
      /**
       * State proof key for light-client support.
       */
      stateProofPk: Uint8Array
      /**
       * First round for which the key is valid.
       */
      voteFirst: bigint | number
      /**
       * Last round for which the key is valid.
       */
      voteLast: bigint | number
      /**
       * Dilution factor for the participation key.
       */
      voteKeyDilution: bigint | number
    }
    'goOffline()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account,uint64)void': [admin: Uint8Array | string, baseTokenId: bigint | number]
    'initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void': [mbrTxn: AppMethodCallTransactionArgument, ltvBps: bigint | number, liqThresholdBps: bigint | number, liqBonusBps: bigint | number, originationFeeBps: bigint | number, protocolShareBps: bigint | number, oracleAppId: bigint, buyoutTokenId: bigint | number, additionalRewardsCommissionPercentage: bigint | number]
    'setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': [baseBps: bigint | number, utilCapBps: bigint | number, kinkNormBps: bigint | number, slope1Bps: bigint | number, slope2Bps: bigint | number, maxAprBps: bigint | number, maxAprStepBps: bigint | number, emaAlphaBps: bigint | number, powerGammaQ16: bigint | number, scarcityKBps: bigint | number, rateModelType: bigint | number, liqBonusBps: bigint | number]
    'setContractState(uint64)void': [state: bigint | number]
    'setMigrationAdmin(account)void': [migrationAdmin: Uint8Array | string]
    'generateLSTToken(pay)void': [mbrTxn: AppMethodCallTransactionArgument]
    'optInToLST(uint64,pay)void': [lstAssetId: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'configureLSTToken(axfer,uint64)void': [axferTxn: AppMethodCallTransactionArgument, circulatingLst: bigint | number]
    'getOraclePrice(uint64)uint64': [tokenId: bigint | number]
    'addNewCollateralType(uint64,uint64,pay,uint64)void': [collateralTokenId: bigint | number, collateralBaseTokenId: bigint | number, mbrTxn: AppMethodCallTransactionArgument, originatingAppId: bigint | number]
    'depositAlgo(pay,uint64,pay)void': [depositTxn: AppMethodCallTransactionArgument, amount: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'withdrawDeposit(axfer,uint64,uint64,pay)void': [assetTransferTxn: AppMethodCallTransactionArgument, amount: bigint | number, lstAppId: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'borrow(axfer,uint64,uint64,uint64,uint64,pay)void': [assetTransferTxn: AppMethodCallTransactionArgument, requestedLoanAmount: bigint | number, collateralAmount: bigint | number, lstApp: bigint | number, collateralTokenId: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'addLoanRecordExternal(uint64,uint64,account,uint64)void': [disbursement: bigint | number, collateralTokenId: bigint | number, borrowerAddress: Uint8Array | string, collateralAmount: bigint | number]
    'accrueLoanInterest(account,account)void': [debtor: Uint8Array | string, templateReserveAddress: Uint8Array | string]
    'current_apr_bps()uint64': []
    'getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)': [borrowerAddress: Uint8Array | string]
    'repayLoanAlgo(pay,uint64)void': [paymentTxn: AppMethodCallTransactionArgument, repaymentAmount: bigint | number]
    'withdrawPlatformFees(account,pay)void': [paymentReceiver: Uint8Array | string, feeTxn: AppMethodCallTransactionArgument]
    'buyoutSplitAlgo(account,account,axfer,pay,uint64)void': [buyer: Uint8Array | string, debtor: Uint8Array | string, premiumAxferTxn: AppMethodCallTransactionArgument, repayPayTxn: AppMethodCallTransactionArgument, lstAppId: bigint | number]
    'maxWithdrawableCollateralLST(uint64)uint64': [lstAppId: bigint | number]
    'withdrawCollateral(uint64,uint64,uint64)void': [amountLst: bigint | number, collateralTokenId: bigint | number, lstAppId: bigint | number]
    'getCirculatingLST()uint64': []
    'getTotalDeposits()uint64': []
    'getAcceptedCollateralsCount()uint64': []
    'liquidatePartialAlgo(account,pay,uint64,uint64)void': [debtor: Uint8Array | string, repayPay: AppMethodCallTransactionArgument, repayBaseAmount: bigint | number, lstAppId: bigint | number]
    'getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)': [borrower: Uint8Array | string]
    'gas()void': []
    'calculateCollateralValueUSD(uint64,uint64,uint64)uint64': [collateralTokenId: bigint | number, collateralAmount: bigint | number, lstApp: bigint | number]
    'pickupAlgoRewards()void': []
    'migrateCollateralTokenId(uint64,pay)void': [collateralTokenId: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [feeTxn: AppMethodCallTransactionArgument]
    'acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void': [lstTransferTxn: AppMethodCallTransactionArgument, algoTxn: AppMethodCallTransactionArgument, snapshot: MigrationSnapshot, migrationAdmin: Uint8Array | string]
    'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': [feePayment: AppMethodCallTransactionArgument, votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
    'goOffline()void': []
  }
}

/**
 * The return type for each method
 */
export type OrbitalLendingReturns = {
  'createApplication(account,uint64)void': void
  'initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void': void
  'setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': void
  'setContractState(uint64)void': void
  'setMigrationAdmin(account)void': void
  'generateLSTToken(pay)void': void
  'optInToLST(uint64,pay)void': void
  'configureLSTToken(axfer,uint64)void': void
  'getOraclePrice(uint64)uint64': bigint
  'addNewCollateralType(uint64,uint64,pay,uint64)void': void
  'depositAlgo(pay,uint64,pay)void': void
  'withdrawDeposit(axfer,uint64,uint64,pay)void': void
  'borrow(axfer,uint64,uint64,uint64,uint64,pay)void': void
  'addLoanRecordExternal(uint64,uint64,account,uint64)void': void
  'accrueLoanInterest(account,account)void': void
  'current_apr_bps()uint64': bigint
  'getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)': LoanRecord
  'repayLoanAlgo(pay,uint64)void': void
  'withdrawPlatformFees(account,pay)void': void
  'buyoutSplitAlgo(account,account,axfer,pay,uint64)void': void
  'maxWithdrawableCollateralLST(uint64)uint64': bigint
  'withdrawCollateral(uint64,uint64,uint64)void': void
  'getCirculatingLST()uint64': bigint
  'getTotalDeposits()uint64': bigint
  'getAcceptedCollateralsCount()uint64': bigint
  'liquidatePartialAlgo(account,pay,uint64,uint64)void': void
  'getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)': GetLoanStatusResult
  'gas()void': void
  'calculateCollateralValueUSD(uint64,uint64,uint64)uint64': bigint
  'pickupAlgoRewards()void': void
  'migrateCollateralTokenId(uint64,pay)void': void
  'migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': MigrationSnapshot
  'acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void': void
  'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': void
  'goOffline()void': void
}

/**
 * Defines the types of available calls and state of the OrbitalLending smart contract.
 */
export type OrbitalLendingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account,uint64)void' | 'createApplication', {
      argsObj: OrbitalLendingArgs['obj']['createApplication(account,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']
      returns: OrbitalLendingReturns['createApplication(account,uint64)void']
    }>
    & Record<'initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void' | 'initApplication', {
      argsObj: OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void']
      returns: OrbitalLendingReturns['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void']
    }>
    & Record<'setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' | 'setRateParams', {
      argsObj: OrbitalLendingArgs['obj']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
      returns: OrbitalLendingReturns['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'setContractState(uint64)void' | 'setContractState', {
      argsObj: OrbitalLendingArgs['obj']['setContractState(uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['setContractState(uint64)void']
      returns: OrbitalLendingReturns['setContractState(uint64)void']
    }>
    & Record<'setMigrationAdmin(account)void' | 'setMigrationAdmin', {
      argsObj: OrbitalLendingArgs['obj']['setMigrationAdmin(account)void']
      argsTuple: OrbitalLendingArgs['tuple']['setMigrationAdmin(account)void']
      returns: OrbitalLendingReturns['setMigrationAdmin(account)void']
    }>
    & Record<'generateLSTToken(pay)void' | 'generateLSTToken', {
      argsObj: OrbitalLendingArgs['obj']['generateLSTToken(pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']
      returns: OrbitalLendingReturns['generateLSTToken(pay)void']
    }>
    & Record<'optInToLST(uint64,pay)void' | 'optInToLST', {
      argsObj: OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']
      returns: OrbitalLendingReturns['optInToLST(uint64,pay)void']
    }>
    & Record<'configureLSTToken(axfer,uint64)void' | 'configureLSTToken', {
      argsObj: OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']
      returns: OrbitalLendingReturns['configureLSTToken(axfer,uint64)void']
    }>
    & Record<'getOraclePrice(uint64)uint64' | 'getOraclePrice', {
      argsObj: OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64']
      argsTuple: OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']
      /**
       * Current price of the token from oracle (in USD micro-units)
       */
      returns: OrbitalLendingReturns['getOraclePrice(uint64)uint64']
    }>
    & Record<'addNewCollateralType(uint64,uint64,pay,uint64)void' | 'addNewCollateralType', {
      argsObj: OrbitalLendingArgs['obj']['addNewCollateralType(uint64,uint64,pay,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,uint64,pay,uint64)void']
      returns: OrbitalLendingReturns['addNewCollateralType(uint64,uint64,pay,uint64)void']
    }>
    & Record<'depositAlgo(pay,uint64,pay)void' | 'depositAlgo', {
      argsObj: OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']
      returns: OrbitalLendingReturns['depositAlgo(pay,uint64,pay)void']
    }>
    & Record<'withdrawDeposit(axfer,uint64,uint64,pay)void' | 'withdrawDeposit', {
      argsObj: OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']
      returns: OrbitalLendingReturns['withdrawDeposit(axfer,uint64,uint64,pay)void']
    }>
    & Record<'borrow(axfer,uint64,uint64,uint64,uint64,pay)void' | 'borrow', {
      argsObj: OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void']
      returns: OrbitalLendingReturns['borrow(axfer,uint64,uint64,uint64,uint64,pay)void']
    }>
    & Record<'addLoanRecordExternal(uint64,uint64,account,uint64)void' | 'addLoanRecordExternal', {
      argsObj: OrbitalLendingArgs['obj']['addLoanRecordExternal(uint64,uint64,account,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['addLoanRecordExternal(uint64,uint64,account,uint64)void']
      returns: OrbitalLendingReturns['addLoanRecordExternal(uint64,uint64,account,uint64)void']
    }>
    & Record<'accrueLoanInterest(account,account)void' | 'accrueLoanInterest', {
      argsObj: OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void']
      argsTuple: OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']
      returns: OrbitalLendingReturns['accrueLoanInterest(account,account)void']
    }>
    & Record<'current_apr_bps()uint64' | 'current_apr_bps', {
      argsObj: OrbitalLendingArgs['obj']['current_apr_bps()uint64']
      argsTuple: OrbitalLendingArgs['tuple']['current_apr_bps()uint64']
      /**
       * APR value used for subsequent accrual slices.
       */
      returns: OrbitalLendingReturns['current_apr_bps()uint64']
    }>
    & Record<'getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)' | 'getLoanRecord', {
      argsObj: OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)']
      argsTuple: OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)']
      /**
       * Loan record snapshot stored in the box map.
       */
      returns: OrbitalLendingReturns['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)']
    }>
    & Record<'repayLoanAlgo(pay,uint64)void' | 'repayLoanAlgo', {
      argsObj: OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64)void']
      returns: OrbitalLendingReturns['repayLoanAlgo(pay,uint64)void']
    }>
    & Record<'withdrawPlatformFees(account,pay)void' | 'withdrawPlatformFees', {
      argsObj: OrbitalLendingArgs['obj']['withdrawPlatformFees(account,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['withdrawPlatformFees(account,pay)void']
      returns: OrbitalLendingReturns['withdrawPlatformFees(account,pay)void']
    }>
    & Record<'buyoutSplitAlgo(account,account,axfer,pay,uint64)void' | 'buyoutSplitAlgo', {
      argsObj: OrbitalLendingArgs['obj']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void']
      returns: OrbitalLendingReturns['buyoutSplitAlgo(account,account,axfer,pay,uint64)void']
    }>
    & Record<'maxWithdrawableCollateralLST(uint64)uint64' | 'maxWithdrawableCollateralLST', {
      argsObj: OrbitalLendingArgs['obj']['maxWithdrawableCollateralLST(uint64)uint64']
      argsTuple: OrbitalLendingArgs['tuple']['maxWithdrawableCollateralLST(uint64)uint64']
      /**
       * Maximum withdrawable LST balance for the borrower.
       */
      returns: OrbitalLendingReturns['maxWithdrawableCollateralLST(uint64)uint64']
    }>
    & Record<'withdrawCollateral(uint64,uint64,uint64)void' | 'withdrawCollateral', {
      argsObj: OrbitalLendingArgs['obj']['withdrawCollateral(uint64,uint64,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['withdrawCollateral(uint64,uint64,uint64)void']
      returns: OrbitalLendingReturns['withdrawCollateral(uint64,uint64,uint64)void']
    }>
    & Record<'getCirculatingLST()uint64' | 'getCirculatingLST', {
      argsObj: OrbitalLendingArgs['obj']['getCirculatingLST()uint64']
      argsTuple: OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']
      /**
       * Total LST tokens representing all depositor claims
       */
      returns: OrbitalLendingReturns['getCirculatingLST()uint64']
    }>
    & Record<'getTotalDeposits()uint64' | 'getTotalDeposits', {
      argsObj: OrbitalLendingArgs['obj']['getTotalDeposits()uint64']
      argsTuple: OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']
      /**
       * Total underlying assets available for lending
       */
      returns: OrbitalLendingReturns['getTotalDeposits()uint64']
    }>
    & Record<'getAcceptedCollateralsCount()uint64' | 'getAcceptedCollateralsCount', {
      argsObj: OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64']
      argsTuple: OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']
      /**
       * Count of registered collateral asset types
       */
      returns: OrbitalLendingReturns['getAcceptedCollateralsCount()uint64']
    }>
    & Record<'liquidatePartialAlgo(account,pay,uint64,uint64)void' | 'liquidatePartialAlgo', {
      argsObj: OrbitalLendingArgs['obj']['liquidatePartialAlgo(account,pay,uint64,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['liquidatePartialAlgo(account,pay,uint64,uint64)void']
      returns: OrbitalLendingReturns['liquidatePartialAlgo(account,pay,uint64,uint64)void']
    }>
    & Record<'getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)' | 'getLoanStatus', {
      argsObj: OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']
      argsTuple: OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']
      /**
       * Object containing debt amount, collateral value, ratios, and liquidation eligibility
       */
      returns: OrbitalLendingReturns['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: OrbitalLendingArgs['obj']['gas()void']
      argsTuple: OrbitalLendingArgs['tuple']['gas()void']
      returns: OrbitalLendingReturns['gas()void']
    }>
    & Record<'calculateCollateralValueUSD(uint64,uint64,uint64)uint64' | 'calculateCollateralValueUSD', {
      argsObj: OrbitalLendingArgs['obj']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64']
      argsTuple: OrbitalLendingArgs['tuple']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64']
      /**
       * Collateral value denominated in USD micro-units.
       */
      returns: OrbitalLendingReturns['calculateCollateralValueUSD(uint64,uint64,uint64)uint64']
    }>
    & Record<'pickupAlgoRewards()void' | 'pickupAlgoRewards', {
      argsObj: OrbitalLendingArgs['obj']['pickupAlgoRewards()void']
      argsTuple: OrbitalLendingArgs['tuple']['pickupAlgoRewards()void']
      returns: OrbitalLendingReturns['pickupAlgoRewards()void']
    }>
    & Record<'migrateCollateralTokenId(uint64,pay)void' | 'migrateCollateralTokenId', {
      argsObj: OrbitalLendingArgs['obj']['migrateCollateralTokenId(uint64,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['migrateCollateralTokenId(uint64,pay)void']
      returns: OrbitalLendingReturns['migrateCollateralTokenId(uint64,pay)void']
    }>
    & Record<'migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'migrateContract', {
      argsObj: OrbitalLendingArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: OrbitalLendingArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: OrbitalLendingReturns['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void' | 'acceptMigrationAlgoContract', {
      argsObj: OrbitalLendingArgs['obj']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void']
      argsTuple: OrbitalLendingArgs['tuple']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void']
      returns: OrbitalLendingReturns['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void']
    }>
    & Record<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'goOnline', {
      argsObj: OrbitalLendingArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
      returns: OrbitalLendingReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
    }>
    & Record<'goOffline()void' | 'goOffline', {
      argsObj: OrbitalLendingArgs['obj']['goOffline()void']
      argsTuple: OrbitalLendingArgs['tuple']['goOffline()void']
      returns: OrbitalLendingReturns['goOffline()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * The main lending token used for deposits and borrowing (0 for ALGO)
         */
        baseTokenId: bigint
        /**
         * LST (Liquidity Staking Token) representing depositor shares in the pool
         */
        lstTokenId: bigint
        /**
         * Total LST tokens currently in circulation (represents depositor claims)
         */
        circulatingLst: bigint
        /**
         * Total underlying assets deposited in the protocol
         */
        totalDeposits: bigint
        /**
         * Protocol fee accumulation pool (admin withdrawable)
         */
        feePool: bigint
        /**
         * Administrative account with privileged access to protocol functions
         */
        adminAccount: string
        /**
         * External oracle application for asset price feeds
         */
        oracleApp: bigint
        /**
         * Loan-to-Value ratio (e.g., 7500 = 75% max borrowing against collateral)
         */
        ltvBps: bigint
        /**
         * Liquidation threshold (e.g., 8500 = 85% - liquidate when CR falls below)
         */
        liqThresholdBps: bigint
        /**
         * One-time fee charged on loan origination (e.g., 100 = 1%)
         */
        originationFeeBps: bigint
        /**
         * Protocol's share of interest income (e.g., 2000 = 20%)
         */
        protocolShareBps: bigint
        /**
         * Minimum APR at 0% utilization (basis points per year).
         */
        baseBps: bigint
        /**
         * Hard utilization cap in bps (e.g., 8000 = 80% of deposits may be borrowed).
         */
        utilCapBps: bigint
        /**
         * Kink point on normalized utilization (0..10_000 across [0..util_cap]).
         */
        kinkNormBps: bigint
        /**
         * APR increase from 0 → kink (added to base) over the normalized range.
         */
        slope1Bps: bigint
        /**
         * APR increase from kink → cap (added after kink) over the normalized range.
         */
        slope2Bps: bigint
        /**
         * (Optional) Absolute APR ceiling in bps (0 = no cap).
         */
        maxAprBps: bigint
        /**
         * (Optional) Utilization EMA weight in bps (0..10_000; 0 disables smoothing).
         */
        emaAlphaBps: bigint
        /**
         * (Optional) Max APR change per accrual step in bps (0 = no limit).
         */
        maxAprStepBps: bigint
        /**
         * (Optional, mutable) Last applied APR in bps (for step limiting).
         */
        prevAprBps: bigint
        /**
         * (Optional, mutable) Stored EMA of normalized utilization in bps.
         */
        utilEmaBps: bigint
        /**
         * (Optional) Rate model selector (e.g., 0=kinked, 1=linear, 2=power, 3=asymptote).
         */
        rateModelType: bigint
        /**
         * (Optional) Power-curve exponent γ in Q16.16 fixed-point.
         */
        powerGammaQ16: bigint
        /**
         * (Optional) Strength parameter for asymptotic/scarcity escalator (bps-scaled).
         */
        scarcityKBps: bigint
        /**
         * Total outstanding borrower principal + accrued interest (debt)
         */
        totalBorrows: bigint
        /**
         * Multiplicative borrow index (scaled by INDEX_SCALE). Starts at INDEX_SCALE
         */
        borrowIndexWad: bigint
        /**
         * Timestamp (ledger seconds) at which borrow_index_wad was last advanced
         */
        lastAccrualTs: bigint
        /**
         * APR (in bps) that applied during [last_accrual_ts, now) before recompute
         */
        lastAprBps: bigint
        /**
         * Total number of active loans in the system
         */
        activeLoanRecords: bigint
        /**
         * Count of different collateral types accepted by the protocol
         */
        acceptedCollateralsCount: bigint
        /**
         * Total number of active loans in the system
         */
        buyoutTokenId: bigint
        /**
         * Liquidation bonus in bps (e.g., 500 = 5% bonus to liquidators)
         */
        liqBonusBps: bigint
        commissionPercentage: bigint
        currentAccumulatedCommission: bigint
        totalCommissionEarned: bigint
        totalAdditionalRewards: bigint
        cashOnHand: bigint
        /**
         * Dedicated account that temporarily receives balances during migration
         */
        migrationAdmin: string
        /**
         * Last calculated disbursement amount (for debugging/monitoring)
         */
        lastScaledDownDisbursement: bigint
        /**
         * Last calculated maximum borrowable amount in USD (for debugging)
         */
        lastMaxBorrow: bigint
        /**
         * Last requested loan amount in USD (for debugging)
         */
        lastRequestedLoan: bigint
        /**
         * Difference between max borrow and requested (for debugging)
         */
        debugDiff: bigint
        paramsUpdatedAt: bigint
        paramsUpdateNonce: bigint
        lastInterestApplied: bigint
        deltaDebug: bigint
        calculateledSimpleWad: bigint
        contractState: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        /**
         * Registry of accepted collateral assets with their metadata
         */
        acceptedCollaterals: Map<AcceptedCollateralKey, AcceptedCollateral>
        /**
         * Individual borrower loan records with collateral and debt details
         */
        loanRecord: Map<string, LoanRecord>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OrbitalLendingSignatures = keyof OrbitalLendingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OrbitalLendingNonVoidMethodSignatures = keyof OrbitalLendingTypes['methods'] extends infer T ? T extends keyof OrbitalLendingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the OrbitalLending smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OrbitalLendingSignatures> = OrbitalLendingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OrbitalLending smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OrbitalLendingSignatures> = OrbitalLendingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OrbitalLendingTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = OrbitalLendingTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OrbitalLendingCreateCallParams =
  | Expand<CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & {method: 'createApplication(account,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type OrbitalLendingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OrbitalLendingCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the OrbitalLending smart contract
 */
export abstract class OrbitalLendingParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OrbitalLendingCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(account,uint64)void':
            return OrbitalLendingParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the orbital-lending smart contract using the createApplication(account,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(account,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin, params.args.baseTokenId],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void ABI method
   *
   * Initializes the lending protocol with core parameters and configurations
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn, params.args.ltvBps, params.args.liqThresholdBps, params.args.liqBonusBps, params.args.originationFeeBps, params.args.protocolShareBps, params.args.oracleAppId, params.args.buyoutTokenId, params.args.additionalRewardsCommissionPercentage],
    }
  }
  /**
   * Constructs a no op call for the setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * Sets the core lending parameters for the protocol
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setRateParams(params: CallParams<OrbitalLendingArgs['obj']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.baseBps, params.args.utilCapBps, params.args.kinkNormBps, params.args.slope1Bps, params.args.slope2Bps, params.args.maxAprBps, params.args.maxAprStepBps, params.args.emaAlphaBps, params.args.powerGammaQ16, params.args.scarcityKBps, params.args.rateModelType, params.args.liqBonusBps],
    }
  }
  /**
   * Constructs a no op call for the setContractState(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setContractState(params: CallParams<OrbitalLendingArgs['obj']['setContractState(uint64)void'] | OrbitalLendingArgs['tuple']['setContractState(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setContractState(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.state],
    }
  }
  /**
   * Constructs a no op call for the setMigrationAdmin(account)void ABI method
   *
   * Sets or updates the migration administrator account used during contract upgrades.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setMigrationAdmin(params: CallParams<OrbitalLendingArgs['obj']['setMigrationAdmin(account)void'] | OrbitalLendingArgs['tuple']['setMigrationAdmin(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setMigrationAdmin(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.migrationAdmin],
    }
  }
  /**
   * Constructs a no op call for the generateLSTToken(pay)void ABI method
   *
   * Generates a new LST (Liquidity Staking Token) for the base lending token.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static generateLstToken(params: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'generateLSTToken(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the optInToLST(uint64,pay)void ABI method
   *
   * Opts into an externally created LST token instead of minting a new one.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToLst(params: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToLST(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.lstAssetId, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the configureLSTToken(axfer,uint64)void ABI method
   *
   * Configures the LST token by seeding the initial circulating supply.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static configureLstToken(params: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'configureLSTToken(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axferTxn, params.args.circulatingLst],
    }
  }
  /**
   * Constructs a no op call for the getOraclePrice(uint64)uint64 ABI method
   *
   * Retrieves current price for a token from the configured oracle
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getOraclePrice(params: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getOraclePrice(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the addNewCollateralType(uint64,uint64,pay,uint64)void ABI method
   *
   * Adds a new asset type as accepted collateral for borrowing
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addNewCollateralType(params: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,uint64,pay,uint64)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,uint64,pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addNewCollateralType(uint64,uint64,pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.collateralTokenId, params.args.collateralBaseTokenId, params.args.mbrTxn, params.args.originatingAppId],
    }
  }
  /**
   * Constructs a no op call for the depositAlgo(pay,uint64,pay)void ABI method
   *
   * Deposits ALGO into the lending pool and receives LST tokens in return
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositAlgo(params: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'depositAlgo(pay,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.depositTxn, params.args.amount, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the withdrawDeposit(axfer,uint64,uint64,pay)void ABI method
   *
   * Withdraws deposited assets by burning LST tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawDeposit(params: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawDeposit(axfer,uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTransferTxn, params.args.amount, params.args.lstAppId, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the borrow(axfer,uint64,uint64,uint64,uint64,pay)void ABI method
   *
   * Borrows base assets against collateral with interest and fees
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static borrow(params: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'borrow(axfer,uint64,uint64,uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTransferTxn, params.args.requestedLoanAmount, params.args.collateralAmount, params.args.lstApp, params.args.collateralTokenId, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the addLoanRecordExternal(uint64,uint64,account,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLoanRecordExternal(params: CallParams<OrbitalLendingArgs['obj']['addLoanRecordExternal(uint64,uint64,account,uint64)void'] | OrbitalLendingArgs['tuple']['addLoanRecordExternal(uint64,uint64,account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLoanRecordExternal(uint64,uint64,account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.disbursement, params.args.collateralTokenId, params.args.borrowerAddress, params.args.collateralAmount],
    }
  }
  /**
   * Constructs a no op call for the accrueLoanInterest(account,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static accrueLoanInterest(params: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'accrueLoanInterest(account,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.debtor, params.args.templateReserveAddress],
    }
  }
  /**
   * Constructs a no op call for the current_apr_bps()uint64 ABI method
   *
   * Computes the current borrow APR in basis points, applying smoothing and clamps.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static currentAprBps(params: CallParams<OrbitalLendingArgs['obj']['current_apr_bps()uint64'] | OrbitalLendingArgs['tuple']['current_apr_bps()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'current_apr_bps()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64) ABI method
   *
   * Fetches the stored loan record for a borrower (without accrual).
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLoanRecord(params: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.borrowerAddress],
    }
  }
  /**
   * Constructs a no op call for the repayLoanAlgo(pay,uint64)void ABI method
   *
   * Repays a loan using ALGO and optionally releases collateral
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static repayLoanAlgo(params: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'repayLoanAlgo(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paymentTxn, params.args.repaymentAmount],
    }
  }
  /**
   * Constructs a no op call for the withdrawPlatformFees(account,pay)void ABI method
   *
   * Withdraws accumulated protocol fees and commission to the admin-controlled account.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawPlatformFees(params: CallParams<OrbitalLendingArgs['obj']['withdrawPlatformFees(account,pay)void'] | OrbitalLendingArgs['tuple']['withdrawPlatformFees(account,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawPlatformFees(account,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paymentReceiver, params.args.feeTxn],
    }
  }
  /**
   * Constructs a no op call for the buyoutSplitAlgo(account,account,axfer,pay,uint64)void ABI method
   *
   * Purchases a borrower's collateral at a premium using ALGO payment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyoutSplitAlgo(params: CallParams<OrbitalLendingArgs['obj']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void'] | OrbitalLendingArgs['tuple']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buyoutSplitAlgo(account,account,axfer,pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyer, params.args.debtor, params.args.premiumAxferTxn, params.args.repayPayTxn, params.args.lstAppId],
    }
  }
  /**
   * Constructs a no op call for the maxWithdrawableCollateralLST(uint64)uint64 ABI method
   *
   * Computes how much LST collateral the caller can withdraw using live market data.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static maxWithdrawableCollateralLst(params: CallParams<OrbitalLendingArgs['obj']['maxWithdrawableCollateralLST(uint64)uint64'] | OrbitalLendingArgs['tuple']['maxWithdrawableCollateralLST(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'maxWithdrawableCollateralLST(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.lstAppId],
    }
  }
  /**
   * Constructs a no op call for the withdrawCollateral(uint64,uint64,uint64)void ABI method
   *
   * Allows borrowers to withdraw a portion of their collateral within safety limits.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawCollateral(params: CallParams<OrbitalLendingArgs['obj']['withdrawCollateral(uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['withdrawCollateral(uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawCollateral(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amountLst, params.args.collateralTokenId, params.args.lstAppId],
    }
  }
  /**
   * Constructs a no op call for the getCirculatingLST()uint64 ABI method
   *
   * Returns the current amount of LST tokens in circulation
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCirculatingLst(params: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCirculatingLST()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalDeposits()uint64 ABI method
   *
   * Returns the total amount of base assets deposited in the protocol
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalDeposits(params: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalDeposits()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getAcceptedCollateralsCount()uint64 ABI method
   *
   * Returns the number of different collateral types accepted by the protocol
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAcceptedCollateralsCount(params: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAcceptedCollateralsCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the liquidatePartialAlgo(account,pay,uint64,uint64)void ABI method
   *
   * Liquidates an undercollateralized loan using ALGO payment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static liquidatePartialAlgo(params: CallParams<OrbitalLendingArgs['obj']['liquidatePartialAlgo(account,pay,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['liquidatePartialAlgo(account,pay,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'liquidatePartialAlgo(account,pay,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.debtor, params.args.repayPay, params.args.repayBaseAmount, params.args.lstAppId],
    }
  }
  /**
   * Constructs a no op call for the getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool) ABI method
   *
   * Retrieves comprehensive status information for a borrower's loan
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLoanStatus(params: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.borrower],
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * No-op method kept for compatibility with interfaces that expect a gas entry point.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static gas(params: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'gas()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculateCollateralValueUSD(uint64,uint64,uint64)uint64 ABI method
   *
   * Calculates the USD value of a collateral position using the LST exchange rate and oracle price.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateCollateralValueUsd(params: CallParams<OrbitalLendingArgs['obj']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64'] | OrbitalLendingArgs['tuple']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateCollateralValueUSD(uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.collateralTokenId, params.args.collateralAmount, params.args.lstApp],
    }
  }
  /**
   * Constructs a no op call for the pickupAlgoRewards()void ABI method
   *
   * Harvests newly accrued consensus rewards for ALGO-based markets.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pickupAlgoRewards(params: CallParams<OrbitalLendingArgs['obj']['pickupAlgoRewards()void'] | OrbitalLendingArgs['tuple']['pickupAlgoRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pickupAlgoRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the migrateCollateralTokenId(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static migrateCollateralTokenId(params: CallParams<OrbitalLendingArgs['obj']['migrateCollateralTokenId(uint64,pay)void'] | OrbitalLendingArgs['tuple']['migrateCollateralTokenId(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'migrateCollateralTokenId(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.collateralTokenId, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Initiates migration by sweeping balances from this contract to the migration administrator.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static migrateContract(params: CallParams<OrbitalLendingArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.feeTxn],
    }
  }
  /**
   * Constructs a no op call for the acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void ABI method
   *
   * Finalises migration by importing balances and restoring accounting on the new contract.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static acceptMigrationAlgoContract(params: CallParams<OrbitalLendingArgs['obj']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void'] | OrbitalLendingArgs['tuple']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.lstTransferTxn, params.args.algoTxn, params.args.snapshot, params.args.migrationAdmin],
    }
  }
  /**
   * Constructs a no op call for the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * Registers the application account as an Algorand consensus participant.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static goOnline(params: CallParams<OrbitalLendingArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.feePayment, params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution],
    }
  }
  /**
   * Constructs a no op call for the goOffline()void ABI method
   *
   * Unregisters the application account from consensus participation.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static goOffline(params: CallParams<OrbitalLendingArgs['obj']['goOffline()void'] | OrbitalLendingArgs['tuple']['goOffline()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'goOffline()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the orbital-lending smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OrbitalLendingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OrbitalLendingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OrbitalLendingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OrbitalLendingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the orbital-lending smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OrbitalLendingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OrbitalLendingParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OrbitalLendingCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OrbitalLendingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the orbital-lending smart contract using the createApplication(account,uint64)void ABI method.
       *
       * Creates the lending application contract with initial configuration
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(OrbitalLendingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the orbital-lending smart contract using the createApplication(account,uint64)void ABI method.
       *
       * Creates the lending application contract with initial configuration
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(OrbitalLendingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the orbital-lending smart contract using an ABI method call using the createApplication(account,uint64)void ABI method.
       *
       * Creates the lending application contract with initial configuration
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(OrbitalLendingParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OrbitalLendingReturns['createApplication(account,uint64)void']) }, appClient: new OrbitalLendingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the orbital-lending smart contract
 */
export class OrbitalLendingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OrbitalLendingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the OrbitalLending app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OrbitalLendingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OrbitalLendingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OrbitalLendingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OrbitalLendingClient> {
    return new OrbitalLendingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OrbitalLendingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OrbitalLendingClient> {
    return new OrbitalLendingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the orbital-lending smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void` ABI method.
     *
     * Initializes the lending protocol with core parameters and configurations
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * Sets the core lending parameters for the protocol
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setRateParams: (params: CallParams<OrbitalLendingArgs['obj']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.setRateParams(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `setContractState(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setContractState: (params: CallParams<OrbitalLendingArgs['obj']['setContractState(uint64)void'] | OrbitalLendingArgs['tuple']['setContractState(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.setContractState(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `setMigrationAdmin(account)void` ABI method.
     *
     * Sets or updates the migration administrator account used during contract upgrades.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setMigrationAdmin: (params: CallParams<OrbitalLendingArgs['obj']['setMigrationAdmin(account)void'] | OrbitalLendingArgs['tuple']['setMigrationAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.setMigrationAdmin(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `generateLSTToken(pay)void` ABI method.
     *
     * Generates a new LST (Liquidity Staking Token) for the base lending token.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    generateLstToken: (params: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.generateLstToken(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `optInToLST(uint64,pay)void` ABI method.
     *
     * Opts into an externally created LST token instead of minting a new one.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToLst: (params: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.optInToLst(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `configureLSTToken(axfer,uint64)void` ABI method.
     *
     * Configures the LST token by seeding the initial circulating supply.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    configureLstToken: (params: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.configureLstToken(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getOraclePrice(uint64)uint64` ABI method.
     *
     * Retrieves current price for a token from the configured oracle
     *
     * @param params The params for the smart contract call
     * @returns The call params: Current price of the token from oracle (in USD micro-units)
     */
    getOraclePrice: (params: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getOraclePrice(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `addNewCollateralType(uint64,uint64,pay,uint64)void` ABI method.
     *
     * Adds a new asset type as accepted collateral for borrowing
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addNewCollateralType: (params: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,uint64,pay,uint64)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,uint64,pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.addNewCollateralType(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `depositAlgo(pay,uint64,pay)void` ABI method.
     *
     * Deposits ALGO into the lending pool and receives LST tokens in return
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositAlgo: (params: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.depositAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawDeposit(axfer,uint64,uint64,pay)void` ABI method.
     *
     * Withdraws deposited assets by burning LST tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawDeposit: (params: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.withdrawDeposit(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `borrow(axfer,uint64,uint64,uint64,uint64,pay)void` ABI method.
     *
     * Borrows base assets against collateral with interest and fees
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    borrow: (params: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.borrow(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `addLoanRecordExternal(uint64,uint64,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLoanRecordExternal: (params: CallParams<OrbitalLendingArgs['obj']['addLoanRecordExternal(uint64,uint64,account,uint64)void'] | OrbitalLendingArgs['tuple']['addLoanRecordExternal(uint64,uint64,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.addLoanRecordExternal(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `accrueLoanInterest(account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    accrueLoanInterest: (params: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.accrueLoanInterest(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `current_apr_bps()uint64` ABI method.
     *
     * Computes the current borrow APR in basis points, applying smoothing and clamps.
     *
     * @param params The params for the smart contract call
     * @returns The call params: APR value used for subsequent accrual slices.
     */
    currentAprBps: (params: CallParams<OrbitalLendingArgs['obj']['current_apr_bps()uint64'] | OrbitalLendingArgs['tuple']['current_apr_bps()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.currentAprBps(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)` ABI method.
     *
     * Fetches the stored loan record for a borrower (without accrual).
     *
     * @param params The params for the smart contract call
     * @returns The call params: Loan record snapshot stored in the box map.
     */
    getLoanRecord: (params: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getLoanRecord(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `repayLoanAlgo(pay,uint64)void` ABI method.
     *
     * Repays a loan using ALGO and optionally releases collateral
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    repayLoanAlgo: (params: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.repayLoanAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawPlatformFees(account,pay)void` ABI method.
     *
     * Withdraws accumulated protocol fees and commission to the admin-controlled account.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawPlatformFees: (params: CallParams<OrbitalLendingArgs['obj']['withdrawPlatformFees(account,pay)void'] | OrbitalLendingArgs['tuple']['withdrawPlatformFees(account,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.withdrawPlatformFees(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `buyoutSplitAlgo(account,account,axfer,pay,uint64)void` ABI method.
     *
     * Purchases a borrower's collateral at a premium using ALGO payment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyoutSplitAlgo: (params: CallParams<OrbitalLendingArgs['obj']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void'] | OrbitalLendingArgs['tuple']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.buyoutSplitAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `maxWithdrawableCollateralLST(uint64)uint64` ABI method.
     *
     * Computes how much LST collateral the caller can withdraw using live market data.
     *
     * @param params The params for the smart contract call
     * @returns The call params: Maximum withdrawable LST balance for the borrower.
     */
    maxWithdrawableCollateralLst: (params: CallParams<OrbitalLendingArgs['obj']['maxWithdrawableCollateralLST(uint64)uint64'] | OrbitalLendingArgs['tuple']['maxWithdrawableCollateralLST(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.maxWithdrawableCollateralLst(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawCollateral(uint64,uint64,uint64)void` ABI method.
     *
     * Allows borrowers to withdraw a portion of their collateral within safety limits.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawCollateral: (params: CallParams<OrbitalLendingArgs['obj']['withdrawCollateral(uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['withdrawCollateral(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.withdrawCollateral(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getCirculatingLST()uint64` ABI method.
     *
     * Returns the current amount of LST tokens in circulation
     *
     * @param params The params for the smart contract call
     * @returns The call params: Total LST tokens representing all depositor claims
     */
    getCirculatingLst: (params: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getCirculatingLst(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getTotalDeposits()uint64` ABI method.
     *
     * Returns the total amount of base assets deposited in the protocol
     *
     * @param params The params for the smart contract call
     * @returns The call params: Total underlying assets available for lending
     */
    getTotalDeposits: (params: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getTotalDeposits(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getAcceptedCollateralsCount()uint64` ABI method.
     *
     * Returns the number of different collateral types accepted by the protocol
     *
     * @param params The params for the smart contract call
     * @returns The call params: Count of registered collateral asset types
     */
    getAcceptedCollateralsCount: (params: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getAcceptedCollateralsCount(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `liquidatePartialAlgo(account,pay,uint64,uint64)void` ABI method.
     *
     * Liquidates an undercollateralized loan using ALGO payment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    liquidatePartialAlgo: (params: CallParams<OrbitalLendingArgs['obj']['liquidatePartialAlgo(account,pay,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['liquidatePartialAlgo(account,pay,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.liquidatePartialAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)` ABI method.
     *
     * Retrieves comprehensive status information for a borrower's loan
     *
     * @param params The params for the smart contract call
     * @returns The call params: Object containing debt amount, collateral value, ratios, and liquidation eligibility
     */
    getLoanStatus: (params: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getLoanStatus(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `gas()void` ABI method.
     *
     * No-op method kept for compatibility with interfaces that expect a gas entry point.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    gas: (params: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.gas(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `calculateCollateralValueUSD(uint64,uint64,uint64)uint64` ABI method.
     *
     * Calculates the USD value of a collateral position using the LST exchange rate and oracle price.
     *
     * @param params The params for the smart contract call
     * @returns The call params: Collateral value denominated in USD micro-units.
     */
    calculateCollateralValueUsd: (params: CallParams<OrbitalLendingArgs['obj']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64'] | OrbitalLendingArgs['tuple']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.calculateCollateralValueUsd(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `pickupAlgoRewards()void` ABI method.
     *
     * Harvests newly accrued consensus rewards for ALGO-based markets.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pickupAlgoRewards: (params: CallParams<OrbitalLendingArgs['obj']['pickupAlgoRewards()void'] | OrbitalLendingArgs['tuple']['pickupAlgoRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.pickupAlgoRewards(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `migrateCollateralTokenId(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    migrateCollateralTokenId: (params: CallParams<OrbitalLendingArgs['obj']['migrateCollateralTokenId(uint64,pay)void'] | OrbitalLendingArgs['tuple']['migrateCollateralTokenId(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.migrateCollateralTokenId(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * Initiates migration by sweeping balances from this contract to the migration administrator.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    migrateContract: (params: CallParams<OrbitalLendingArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.migrateContract(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void` ABI method.
     *
     * Finalises migration by importing balances and restoring accounting on the new contract.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    acceptMigrationAlgoContract: (params: CallParams<OrbitalLendingArgs['obj']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void'] | OrbitalLendingArgs['tuple']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.acceptMigrationAlgoContract(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
     * Registers the application account as an Algorand consensus participant.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    goOnline: (params: CallParams<OrbitalLendingArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.goOnline(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `goOffline()void` ABI method.
     *
     * Unregisters the application account from consensus participation.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    goOffline: (params: CallParams<OrbitalLendingArgs['obj']['goOffline()void'] | OrbitalLendingArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.goOffline(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the orbital-lending smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void` ABI method.
     *
     * Initializes the lending protocol with core parameters and configurations
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * Sets the core lending parameters for the protocol
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setRateParams: (params: CallParams<OrbitalLendingArgs['obj']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.setRateParams(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `setContractState(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setContractState: (params: CallParams<OrbitalLendingArgs['obj']['setContractState(uint64)void'] | OrbitalLendingArgs['tuple']['setContractState(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.setContractState(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `setMigrationAdmin(account)void` ABI method.
     *
     * Sets or updates the migration administrator account used during contract upgrades.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setMigrationAdmin: (params: CallParams<OrbitalLendingArgs['obj']['setMigrationAdmin(account)void'] | OrbitalLendingArgs['tuple']['setMigrationAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.setMigrationAdmin(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `generateLSTToken(pay)void` ABI method.
     *
     * Generates a new LST (Liquidity Staking Token) for the base lending token.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    generateLstToken: (params: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.generateLstToken(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `optInToLST(uint64,pay)void` ABI method.
     *
     * Opts into an externally created LST token instead of minting a new one.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToLst: (params: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.optInToLst(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `configureLSTToken(axfer,uint64)void` ABI method.
     *
     * Configures the LST token by seeding the initial circulating supply.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    configureLstToken: (params: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.configureLstToken(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getOraclePrice(uint64)uint64` ABI method.
     *
     * Retrieves current price for a token from the configured oracle
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Current price of the token from oracle (in USD micro-units)
     */
    getOraclePrice: (params: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getOraclePrice(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `addNewCollateralType(uint64,uint64,pay,uint64)void` ABI method.
     *
     * Adds a new asset type as accepted collateral for borrowing
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addNewCollateralType: (params: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,uint64,pay,uint64)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,uint64,pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.addNewCollateralType(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `depositAlgo(pay,uint64,pay)void` ABI method.
     *
     * Deposits ALGO into the lending pool and receives LST tokens in return
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositAlgo: (params: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.depositAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawDeposit(axfer,uint64,uint64,pay)void` ABI method.
     *
     * Withdraws deposited assets by burning LST tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawDeposit: (params: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.withdrawDeposit(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `borrow(axfer,uint64,uint64,uint64,uint64,pay)void` ABI method.
     *
     * Borrows base assets against collateral with interest and fees
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    borrow: (params: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.borrow(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `addLoanRecordExternal(uint64,uint64,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLoanRecordExternal: (params: CallParams<OrbitalLendingArgs['obj']['addLoanRecordExternal(uint64,uint64,account,uint64)void'] | OrbitalLendingArgs['tuple']['addLoanRecordExternal(uint64,uint64,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.addLoanRecordExternal(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `accrueLoanInterest(account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    accrueLoanInterest: (params: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.accrueLoanInterest(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `current_apr_bps()uint64` ABI method.
     *
     * Computes the current borrow APR in basis points, applying smoothing and clamps.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: APR value used for subsequent accrual slices.
     */
    currentAprBps: (params: CallParams<OrbitalLendingArgs['obj']['current_apr_bps()uint64'] | OrbitalLendingArgs['tuple']['current_apr_bps()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.currentAprBps(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)` ABI method.
     *
     * Fetches the stored loan record for a borrower (without accrual).
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Loan record snapshot stored in the box map.
     */
    getLoanRecord: (params: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getLoanRecord(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `repayLoanAlgo(pay,uint64)void` ABI method.
     *
     * Repays a loan using ALGO and optionally releases collateral
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    repayLoanAlgo: (params: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.repayLoanAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawPlatformFees(account,pay)void` ABI method.
     *
     * Withdraws accumulated protocol fees and commission to the admin-controlled account.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawPlatformFees: (params: CallParams<OrbitalLendingArgs['obj']['withdrawPlatformFees(account,pay)void'] | OrbitalLendingArgs['tuple']['withdrawPlatformFees(account,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.withdrawPlatformFees(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `buyoutSplitAlgo(account,account,axfer,pay,uint64)void` ABI method.
     *
     * Purchases a borrower's collateral at a premium using ALGO payment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyoutSplitAlgo: (params: CallParams<OrbitalLendingArgs['obj']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void'] | OrbitalLendingArgs['tuple']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.buyoutSplitAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `maxWithdrawableCollateralLST(uint64)uint64` ABI method.
     *
     * Computes how much LST collateral the caller can withdraw using live market data.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Maximum withdrawable LST balance for the borrower.
     */
    maxWithdrawableCollateralLst: (params: CallParams<OrbitalLendingArgs['obj']['maxWithdrawableCollateralLST(uint64)uint64'] | OrbitalLendingArgs['tuple']['maxWithdrawableCollateralLST(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.maxWithdrawableCollateralLst(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawCollateral(uint64,uint64,uint64)void` ABI method.
     *
     * Allows borrowers to withdraw a portion of their collateral within safety limits.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawCollateral: (params: CallParams<OrbitalLendingArgs['obj']['withdrawCollateral(uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['withdrawCollateral(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.withdrawCollateral(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getCirculatingLST()uint64` ABI method.
     *
     * Returns the current amount of LST tokens in circulation
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Total LST tokens representing all depositor claims
     */
    getCirculatingLst: (params: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getCirculatingLst(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getTotalDeposits()uint64` ABI method.
     *
     * Returns the total amount of base assets deposited in the protocol
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Total underlying assets available for lending
     */
    getTotalDeposits: (params: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getTotalDeposits(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getAcceptedCollateralsCount()uint64` ABI method.
     *
     * Returns the number of different collateral types accepted by the protocol
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Count of registered collateral asset types
     */
    getAcceptedCollateralsCount: (params: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getAcceptedCollateralsCount(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `liquidatePartialAlgo(account,pay,uint64,uint64)void` ABI method.
     *
     * Liquidates an undercollateralized loan using ALGO payment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    liquidatePartialAlgo: (params: CallParams<OrbitalLendingArgs['obj']['liquidatePartialAlgo(account,pay,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['liquidatePartialAlgo(account,pay,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.liquidatePartialAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)` ABI method.
     *
     * Retrieves comprehensive status information for a borrower's loan
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Object containing debt amount, collateral value, ratios, and liquidation eligibility
     */
    getLoanStatus: (params: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getLoanStatus(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `gas()void` ABI method.
     *
     * No-op method kept for compatibility with interfaces that expect a gas entry point.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    gas: (params: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.gas(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `calculateCollateralValueUSD(uint64,uint64,uint64)uint64` ABI method.
     *
     * Calculates the USD value of a collateral position using the LST exchange rate and oracle price.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Collateral value denominated in USD micro-units.
     */
    calculateCollateralValueUsd: (params: CallParams<OrbitalLendingArgs['obj']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64'] | OrbitalLendingArgs['tuple']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.calculateCollateralValueUsd(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `pickupAlgoRewards()void` ABI method.
     *
     * Harvests newly accrued consensus rewards for ALGO-based markets.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pickupAlgoRewards: (params: CallParams<OrbitalLendingArgs['obj']['pickupAlgoRewards()void'] | OrbitalLendingArgs['tuple']['pickupAlgoRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.pickupAlgoRewards(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `migrateCollateralTokenId(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    migrateCollateralTokenId: (params: CallParams<OrbitalLendingArgs['obj']['migrateCollateralTokenId(uint64,pay)void'] | OrbitalLendingArgs['tuple']['migrateCollateralTokenId(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.migrateCollateralTokenId(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * Initiates migration by sweeping balances from this contract to the migration administrator.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    migrateContract: (params: CallParams<OrbitalLendingArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.migrateContract(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void` ABI method.
     *
     * Finalises migration by importing balances and restoring accounting on the new contract.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    acceptMigrationAlgoContract: (params: CallParams<OrbitalLendingArgs['obj']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void'] | OrbitalLendingArgs['tuple']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.acceptMigrationAlgoContract(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
     * Registers the application account as an Algorand consensus participant.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    goOnline: (params: CallParams<OrbitalLendingArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.goOnline(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `goOffline()void` ABI method.
     *
     * Unregisters the application account from consensus participation.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    goOffline: (params: CallParams<OrbitalLendingArgs['obj']['goOffline()void'] | OrbitalLendingArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.goOffline(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the orbital-lending smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void` ABI method.
     *
     * Initializes the lending protocol with core parameters and configurations
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * Sets the core lending parameters for the protocol
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setRateParams: async (params: CallParams<OrbitalLendingArgs['obj']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.setRateParams(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `setContractState(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setContractState: async (params: CallParams<OrbitalLendingArgs['obj']['setContractState(uint64)void'] | OrbitalLendingArgs['tuple']['setContractState(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.setContractState(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['setContractState(uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `setMigrationAdmin(account)void` ABI method.
     *
     * Sets or updates the migration administrator account used during contract upgrades.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setMigrationAdmin: async (params: CallParams<OrbitalLendingArgs['obj']['setMigrationAdmin(account)void'] | OrbitalLendingArgs['tuple']['setMigrationAdmin(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.setMigrationAdmin(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['setMigrationAdmin(account)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `generateLSTToken(pay)void` ABI method.
     *
     * Generates a new LST (Liquidity Staking Token) for the base lending token.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    generateLstToken: async (params: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.generateLstToken(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['generateLSTToken(pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `optInToLST(uint64,pay)void` ABI method.
     *
     * Opts into an externally created LST token instead of minting a new one.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToLst: async (params: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.optInToLst(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['optInToLST(uint64,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `configureLSTToken(axfer,uint64)void` ABI method.
     *
     * Configures the LST token by seeding the initial circulating supply.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    configureLstToken: async (params: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.configureLstToken(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['configureLSTToken(axfer,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getOraclePrice(uint64)uint64` ABI method.
     *
     * Retrieves current price for a token from the configured oracle
     *
     * @param params The params for the smart contract call
     * @returns The call result: Current price of the token from oracle (in USD micro-units)
     */
    getOraclePrice: async (params: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getOraclePrice(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getOraclePrice(uint64)uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `addNewCollateralType(uint64,uint64,pay,uint64)void` ABI method.
     *
     * Adds a new asset type as accepted collateral for borrowing
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addNewCollateralType: async (params: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,uint64,pay,uint64)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,uint64,pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.addNewCollateralType(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['addNewCollateralType(uint64,uint64,pay,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `depositAlgo(pay,uint64,pay)void` ABI method.
     *
     * Deposits ALGO into the lending pool and receives LST tokens in return
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositAlgo: async (params: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.depositAlgo(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['depositAlgo(pay,uint64,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawDeposit(axfer,uint64,uint64,pay)void` ABI method.
     *
     * Withdraws deposited assets by burning LST tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawDeposit: async (params: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.withdrawDeposit(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['withdrawDeposit(axfer,uint64,uint64,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `borrow(axfer,uint64,uint64,uint64,uint64,pay)void` ABI method.
     *
     * Borrows base assets against collateral with interest and fees
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    borrow: async (params: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.borrow(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['borrow(axfer,uint64,uint64,uint64,uint64,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `addLoanRecordExternal(uint64,uint64,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLoanRecordExternal: async (params: CallParams<OrbitalLendingArgs['obj']['addLoanRecordExternal(uint64,uint64,account,uint64)void'] | OrbitalLendingArgs['tuple']['addLoanRecordExternal(uint64,uint64,account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.addLoanRecordExternal(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['addLoanRecordExternal(uint64,uint64,account,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `accrueLoanInterest(account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    accrueLoanInterest: async (params: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.accrueLoanInterest(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['accrueLoanInterest(account,account)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `current_apr_bps()uint64` ABI method.
     *
     * Computes the current borrow APR in basis points, applying smoothing and clamps.
     *
     * @param params The params for the smart contract call
     * @returns The call result: APR value used for subsequent accrual slices.
     */
    currentAprBps: async (params: CallParams<OrbitalLendingArgs['obj']['current_apr_bps()uint64'] | OrbitalLendingArgs['tuple']['current_apr_bps()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.currentAprBps(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['current_apr_bps()uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)` ABI method.
     *
     * Fetches the stored loan record for a borrower (without accrual).
     *
     * @param params The params for the smart contract call
     * @returns The call result: Loan record snapshot stored in the box map.
     */
    getLoanRecord: async (params: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getLoanRecord(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `repayLoanAlgo(pay,uint64)void` ABI method.
     *
     * Repays a loan using ALGO and optionally releases collateral
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    repayLoanAlgo: async (params: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.repayLoanAlgo(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['repayLoanAlgo(pay,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawPlatformFees(account,pay)void` ABI method.
     *
     * Withdraws accumulated protocol fees and commission to the admin-controlled account.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawPlatformFees: async (params: CallParams<OrbitalLendingArgs['obj']['withdrawPlatformFees(account,pay)void'] | OrbitalLendingArgs['tuple']['withdrawPlatformFees(account,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.withdrawPlatformFees(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['withdrawPlatformFees(account,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `buyoutSplitAlgo(account,account,axfer,pay,uint64)void` ABI method.
     *
     * Purchases a borrower's collateral at a premium using ALGO payment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyoutSplitAlgo: async (params: CallParams<OrbitalLendingArgs['obj']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void'] | OrbitalLendingArgs['tuple']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.buyoutSplitAlgo(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['buyoutSplitAlgo(account,account,axfer,pay,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `maxWithdrawableCollateralLST(uint64)uint64` ABI method.
     *
     * Computes how much LST collateral the caller can withdraw using live market data.
     *
     * @param params The params for the smart contract call
     * @returns The call result: Maximum withdrawable LST balance for the borrower.
     */
    maxWithdrawableCollateralLst: async (params: CallParams<OrbitalLendingArgs['obj']['maxWithdrawableCollateralLST(uint64)uint64'] | OrbitalLendingArgs['tuple']['maxWithdrawableCollateralLST(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.maxWithdrawableCollateralLst(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['maxWithdrawableCollateralLST(uint64)uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawCollateral(uint64,uint64,uint64)void` ABI method.
     *
     * Allows borrowers to withdraw a portion of their collateral within safety limits.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawCollateral: async (params: CallParams<OrbitalLendingArgs['obj']['withdrawCollateral(uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['withdrawCollateral(uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.withdrawCollateral(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['withdrawCollateral(uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getCirculatingLST()uint64` ABI method.
     *
     * Returns the current amount of LST tokens in circulation
     *
     * @param params The params for the smart contract call
     * @returns The call result: Total LST tokens representing all depositor claims
     */
    getCirculatingLst: async (params: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getCirculatingLst(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getCirculatingLST()uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getTotalDeposits()uint64` ABI method.
     *
     * Returns the total amount of base assets deposited in the protocol
     *
     * @param params The params for the smart contract call
     * @returns The call result: Total underlying assets available for lending
     */
    getTotalDeposits: async (params: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getTotalDeposits(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getTotalDeposits()uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getAcceptedCollateralsCount()uint64` ABI method.
     *
     * Returns the number of different collateral types accepted by the protocol
     *
     * @param params The params for the smart contract call
     * @returns The call result: Count of registered collateral asset types
     */
    getAcceptedCollateralsCount: async (params: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getAcceptedCollateralsCount(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getAcceptedCollateralsCount()uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `liquidatePartialAlgo(account,pay,uint64,uint64)void` ABI method.
     *
     * Liquidates an undercollateralized loan using ALGO payment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    liquidatePartialAlgo: async (params: CallParams<OrbitalLendingArgs['obj']['liquidatePartialAlgo(account,pay,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['liquidatePartialAlgo(account,pay,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.liquidatePartialAlgo(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['liquidatePartialAlgo(account,pay,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)` ABI method.
     *
     * Retrieves comprehensive status information for a borrower's loan
     *
     * @param params The params for the smart contract call
     * @returns The call result: Object containing debt amount, collateral value, ratios, and liquidation eligibility
     */
    getLoanStatus: async (params: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getLoanStatus(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `gas()void` ABI method.
     *
     * No-op method kept for compatibility with interfaces that expect a gas entry point.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    gas: async (params: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.gas(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['gas()void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `calculateCollateralValueUSD(uint64,uint64,uint64)uint64` ABI method.
     *
     * Calculates the USD value of a collateral position using the LST exchange rate and oracle price.
     *
     * @param params The params for the smart contract call
     * @returns The call result: Collateral value denominated in USD micro-units.
     */
    calculateCollateralValueUsd: async (params: CallParams<OrbitalLendingArgs['obj']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64'] | OrbitalLendingArgs['tuple']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.calculateCollateralValueUsd(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['calculateCollateralValueUSD(uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `pickupAlgoRewards()void` ABI method.
     *
     * Harvests newly accrued consensus rewards for ALGO-based markets.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pickupAlgoRewards: async (params: CallParams<OrbitalLendingArgs['obj']['pickupAlgoRewards()void'] | OrbitalLendingArgs['tuple']['pickupAlgoRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.pickupAlgoRewards(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['pickupAlgoRewards()void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `migrateCollateralTokenId(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    migrateCollateralTokenId: async (params: CallParams<OrbitalLendingArgs['obj']['migrateCollateralTokenId(uint64,pay)void'] | OrbitalLendingArgs['tuple']['migrateCollateralTokenId(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.migrateCollateralTokenId(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['migrateCollateralTokenId(uint64,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * Initiates migration by sweeping balances from this contract to the migration administrator.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    migrateContract: async (params: CallParams<OrbitalLendingArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.migrateContract(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void` ABI method.
     *
     * Finalises migration by importing balances and restoring accounting on the new contract.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    acceptMigrationAlgoContract: async (params: CallParams<OrbitalLendingArgs['obj']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void'] | OrbitalLendingArgs['tuple']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.acceptMigrationAlgoContract(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
     * Registers the application account as an Algorand consensus participant.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    goOnline: async (params: CallParams<OrbitalLendingArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.goOnline(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `goOffline()void` ABI method.
     *
     * Unregisters the application account from consensus participation.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    goOffline: async (params: CallParams<OrbitalLendingArgs['obj']['goOffline()void'] | OrbitalLendingArgs['tuple']['goOffline()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.goOffline(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['goOffline()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OrbitalLendingClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current orbital-lending app
   */
  state = {
    /**
     * Methods to access global state for the current orbital-lending app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          baseTokenId: result.base_token_id,
          lstTokenId: result.lst_token_id,
          circulatingLst: result.circulating_lst,
          totalDeposits: result.total_deposits,
          feePool: result.fee_pool,
          adminAccount: result.admin_account,
          oracleApp: result.oracle_app,
          ltvBps: result.ltv_bps,
          liqThresholdBps: result.liq_threshold_bps,
          originationFeeBps: result.origination_fee_bps,
          protocolShareBps: result.protocol_share_bps,
          baseBps: result.base_bps,
          utilCapBps: result.util_cap_bps,
          kinkNormBps: result.kink_norm_bps,
          slope1Bps: result.slope1_bps,
          slope2Bps: result.slope2_bps,
          maxAprBps: result.max_apr_bps,
          emaAlphaBps: result.ema_alpha_bps,
          maxAprStepBps: result.max_apr_step_bps,
          prevAprBps: result.prev_apr_bps,
          utilEmaBps: result.util_ema_bps,
          rateModelType: result.rate_model_type,
          powerGammaQ16: result.power_gamma_q16,
          scarcityKBps: result.scarcity_K_bps,
          totalBorrows: result.total_borrows,
          borrowIndexWad: result.borrow_index_wad,
          lastAccrualTs: result.last_accrual_ts,
          lastAprBps: result.last_apr_bps,
          activeLoanRecords: result.active_loan_records,
          acceptedCollateralsCount: result.accepted_collaterals_count,
          buyoutTokenId: result.buyout_token_id,
          liqBonusBps: result.liq_bonus_bps,
          commissionPercentage: result.commission_percentage,
          currentAccumulatedCommission: result.current_accumulated_commission,
          totalCommissionEarned: result.total_commission_earned,
          totalAdditionalRewards: result.total_additional_rewards,
          cashOnHand: result.cash_on_hand,
          migrationAdmin: result.migration_admin,
          lastScaledDownDisbursement: result.last_scaled_down_disbursement,
          lastMaxBorrow: result.last_max_borrow,
          lastRequestedLoan: result.last_requested_loan,
          debugDiff: result.debug_diff,
          paramsUpdatedAt: result.params_updated_at,
          paramsUpdateNonce: result.params_update_nonce,
          lastInterestApplied: result.last_interest_applied,
          deltaDebug: result.delta_debug,
          calculateledSimpleWad: result.calculateledSimpleWad,
          contractState: result.contract_state,
        }
      },
      /**
       * Get the current value of the base_token_id key in global state
       */
      baseTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("base_token_id")) as bigint | undefined },
      /**
       * Get the current value of the lst_token_id key in global state
       */
      lstTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lst_token_id")) as bigint | undefined },
      /**
       * Get the current value of the circulating_lst key in global state
       */
      circulatingLst: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("circulating_lst")) as bigint | undefined },
      /**
       * Get the current value of the total_deposits key in global state
       */
      totalDeposits: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_deposits")) as bigint | undefined },
      /**
       * Get the current value of the fee_pool key in global state
       */
      feePool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_pool")) as bigint | undefined },
      /**
       * Get the current value of the admin_account key in global state
       */
      adminAccount: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin_account")) as string | undefined },
      /**
       * Get the current value of the oracle_app key in global state
       */
      oracleApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("oracle_app")) as bigint | undefined },
      /**
       * Get the current value of the ltv_bps key in global state
       */
      ltvBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ltv_bps")) as bigint | undefined },
      /**
       * Get the current value of the liq_threshold_bps key in global state
       */
      liqThresholdBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("liq_threshold_bps")) as bigint | undefined },
      /**
       * Get the current value of the origination_fee_bps key in global state
       */
      originationFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("origination_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the protocol_share_bps key in global state
       */
      protocolShareBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("protocol_share_bps")) as bigint | undefined },
      /**
       * Get the current value of the base_bps key in global state
       */
      baseBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("base_bps")) as bigint | undefined },
      /**
       * Get the current value of the util_cap_bps key in global state
       */
      utilCapBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("util_cap_bps")) as bigint | undefined },
      /**
       * Get the current value of the kink_norm_bps key in global state
       */
      kinkNormBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("kink_norm_bps")) as bigint | undefined },
      /**
       * Get the current value of the slope1_bps key in global state
       */
      slope1Bps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("slope1_bps")) as bigint | undefined },
      /**
       * Get the current value of the slope2_bps key in global state
       */
      slope2Bps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("slope2_bps")) as bigint | undefined },
      /**
       * Get the current value of the max_apr_bps key in global state
       */
      maxAprBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_apr_bps")) as bigint | undefined },
      /**
       * Get the current value of the ema_alpha_bps key in global state
       */
      emaAlphaBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ema_alpha_bps")) as bigint | undefined },
      /**
       * Get the current value of the max_apr_step_bps key in global state
       */
      maxAprStepBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_apr_step_bps")) as bigint | undefined },
      /**
       * Get the current value of the prev_apr_bps key in global state
       */
      prevAprBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("prev_apr_bps")) as bigint | undefined },
      /**
       * Get the current value of the util_ema_bps key in global state
       */
      utilEmaBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("util_ema_bps")) as bigint | undefined },
      /**
       * Get the current value of the rate_model_type key in global state
       */
      rateModelType: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rate_model_type")) as bigint | undefined },
      /**
       * Get the current value of the power_gamma_q16 key in global state
       */
      powerGammaQ16: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("power_gamma_q16")) as bigint | undefined },
      /**
       * Get the current value of the scarcity_K_bps key in global state
       */
      scarcityKBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("scarcity_K_bps")) as bigint | undefined },
      /**
       * Get the current value of the total_borrows key in global state
       */
      totalBorrows: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_borrows")) as bigint | undefined },
      /**
       * Get the current value of the borrow_index_wad key in global state
       */
      borrowIndexWad: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("borrow_index_wad")) as bigint | undefined },
      /**
       * Get the current value of the last_accrual_ts key in global state
       */
      lastAccrualTs: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_accrual_ts")) as bigint | undefined },
      /**
       * Get the current value of the last_apr_bps key in global state
       */
      lastAprBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_apr_bps")) as bigint | undefined },
      /**
       * Get the current value of the active_loan_records key in global state
       */
      activeLoanRecords: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("active_loan_records")) as bigint | undefined },
      /**
       * Get the current value of the accepted_collaterals_count key in global state
       */
      acceptedCollateralsCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("accepted_collaterals_count")) as bigint | undefined },
      /**
       * Get the current value of the buyout_token_id key in global state
       */
      buyoutTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("buyout_token_id")) as bigint | undefined },
      /**
       * Get the current value of the liq_bonus_bps key in global state
       */
      liqBonusBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("liq_bonus_bps")) as bigint | undefined },
      /**
       * Get the current value of the commission_percentage key in global state
       */
      commissionPercentage: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("commission_percentage")) as bigint | undefined },
      /**
       * Get the current value of the current_accumulated_commission key in global state
       */
      currentAccumulatedCommission: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("current_accumulated_commission")) as bigint | undefined },
      /**
       * Get the current value of the total_commission_earned key in global state
       */
      totalCommissionEarned: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_commission_earned")) as bigint | undefined },
      /**
       * Get the current value of the total_additional_rewards key in global state
       */
      totalAdditionalRewards: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_additional_rewards")) as bigint | undefined },
      /**
       * Get the current value of the cash_on_hand key in global state
       */
      cashOnHand: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("cash_on_hand")) as bigint | undefined },
      /**
       * Get the current value of the migration_admin key in global state
       */
      migrationAdmin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("migration_admin")) as string | undefined },
      /**
       * Get the current value of the last_scaled_down_disbursement key in global state
       */
      lastScaledDownDisbursement: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_scaled_down_disbursement")) as bigint | undefined },
      /**
       * Get the current value of the last_max_borrow key in global state
       */
      lastMaxBorrow: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_max_borrow")) as bigint | undefined },
      /**
       * Get the current value of the last_requested_loan key in global state
       */
      lastRequestedLoan: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_requested_loan")) as bigint | undefined },
      /**
       * Get the current value of the debug_diff key in global state
       */
      debugDiff: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("debug_diff")) as bigint | undefined },
      /**
       * Get the current value of the params_updated_at key in global state
       */
      paramsUpdatedAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("params_updated_at")) as bigint | undefined },
      /**
       * Get the current value of the params_update_nonce key in global state
       */
      paramsUpdateNonce: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("params_update_nonce")) as bigint | undefined },
      /**
       * Get the current value of the last_interest_applied key in global state
       */
      lastInterestApplied: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_interest_applied")) as bigint | undefined },
      /**
       * Get the current value of the delta_debug key in global state
       */
      deltaDebug: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("delta_debug")) as bigint | undefined },
      /**
       * Get the current value of the calculateledSimpleWad key in global state
       */
      calculateledSimpleWad: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("calculateledSimpleWad")) as bigint | undefined },
      /**
       * Get the current value of the contract_state key in global state
       */
      contractState: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contract_state")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current orbital-lending app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the accepted_collaterals map in box state
       */
      acceptedCollaterals: {
        /**
         * Get all current values of the accepted_collaterals map in box state
         */
        getMap: async (): Promise<Map<AcceptedCollateralKey, AcceptedCollateral>> => { return (await this.appClient.state.box.getMap("accepted_collaterals")) as Map<AcceptedCollateralKey, AcceptedCollateral> },
        /**
         * Get a current value of the accepted_collaterals map by key from box state
         */
        value: async (key: AcceptedCollateralKey): Promise<AcceptedCollateral | undefined> => { return await this.appClient.state.box.getMapValue("accepted_collaterals", key) as AcceptedCollateral | undefined },
      },
      /**
       * Get values from the loan_record map in box state
       */
      loanRecord: {
        /**
         * Get all current values of the loan_record map in box state
         */
        getMap: async (): Promise<Map<string, LoanRecord>> => { return (await this.appClient.state.box.getMap("loan_record")) as Map<string, LoanRecord> },
        /**
         * Get a current value of the loan_record map by key from box state
         */
        value: async (key: string): Promise<LoanRecord | undefined> => { return await this.appClient.state.box.getMapValue("loan_record", key) as LoanRecord | undefined },
      },
    },
  }

  public newGroup(): OrbitalLendingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void method call against the orbital-lending contract
       */
      initApplication(params: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void method call against the orbital-lending contract
       */
      setRateParams(params: CallParams<OrbitalLendingArgs['obj']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setRateParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setContractState(uint64)void method call against the orbital-lending contract
       */
      setContractState(params: CallParams<OrbitalLendingArgs['obj']['setContractState(uint64)void'] | OrbitalLendingArgs['tuple']['setContractState(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setContractState(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setMigrationAdmin(account)void method call against the orbital-lending contract
       */
      setMigrationAdmin(params: CallParams<OrbitalLendingArgs['obj']['setMigrationAdmin(account)void'] | OrbitalLendingArgs['tuple']['setMigrationAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setMigrationAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a generateLSTToken(pay)void method call against the orbital-lending contract
       */
      generateLstToken(params: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.generateLstToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optInToLST(uint64,pay)void method call against the orbital-lending contract
       */
      optInToLst(params: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToLst(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a configureLSTToken(axfer,uint64)void method call against the orbital-lending contract
       */
      configureLstToken(params: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.configureLstToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getOraclePrice(uint64)uint64 method call against the orbital-lending contract
       */
      getOraclePrice(params: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getOraclePrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('getOraclePrice(uint64)uint64', v))
        return this
      },
      /**
       * Add a addNewCollateralType(uint64,uint64,pay,uint64)void method call against the orbital-lending contract
       */
      addNewCollateralType(params: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,uint64,pay,uint64)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,uint64,pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addNewCollateralType(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a depositAlgo(pay,uint64,pay)void method call against the orbital-lending contract
       */
      depositAlgo(params: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawDeposit(axfer,uint64,uint64,pay)void method call against the orbital-lending contract
       */
      withdrawDeposit(params: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawDeposit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a borrow(axfer,uint64,uint64,uint64,uint64,pay)void method call against the orbital-lending contract
       */
      borrow(params: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.borrow(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addLoanRecordExternal(uint64,uint64,account,uint64)void method call against the orbital-lending contract
       */
      addLoanRecordExternal(params: CallParams<OrbitalLendingArgs['obj']['addLoanRecordExternal(uint64,uint64,account,uint64)void'] | OrbitalLendingArgs['tuple']['addLoanRecordExternal(uint64,uint64,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLoanRecordExternal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a accrueLoanInterest(account,account)void method call against the orbital-lending contract
       */
      accrueLoanInterest(params: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.accrueLoanInterest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a current_apr_bps()uint64 method call against the orbital-lending contract
       */
      currentAprBps(params: CallParams<OrbitalLendingArgs['obj']['current_apr_bps()uint64'] | OrbitalLendingArgs['tuple']['current_apr_bps()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.currentAprBps(params)))
        resultMappers.push((v) => client.decodeReturnValue('current_apr_bps()uint64', v))
        return this
      },
      /**
       * Add a getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64) method call against the orbital-lending contract
       */
      getLoanRecord(params: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLoanRecord(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a repayLoanAlgo(pay,uint64)void method call against the orbital-lending contract
       */
      repayLoanAlgo(params: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.repayLoanAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawPlatformFees(account,pay)void method call against the orbital-lending contract
       */
      withdrawPlatformFees(params: CallParams<OrbitalLendingArgs['obj']['withdrawPlatformFees(account,pay)void'] | OrbitalLendingArgs['tuple']['withdrawPlatformFees(account,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawPlatformFees(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buyoutSplitAlgo(account,account,axfer,pay,uint64)void method call against the orbital-lending contract
       */
      buyoutSplitAlgo(params: CallParams<OrbitalLendingArgs['obj']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void'] | OrbitalLendingArgs['tuple']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyoutSplitAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a maxWithdrawableCollateralLST(uint64)uint64 method call against the orbital-lending contract
       */
      maxWithdrawableCollateralLst(params: CallParams<OrbitalLendingArgs['obj']['maxWithdrawableCollateralLST(uint64)uint64'] | OrbitalLendingArgs['tuple']['maxWithdrawableCollateralLST(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.maxWithdrawableCollateralLst(params)))
        resultMappers.push((v) => client.decodeReturnValue('maxWithdrawableCollateralLST(uint64)uint64', v))
        return this
      },
      /**
       * Add a withdrawCollateral(uint64,uint64,uint64)void method call against the orbital-lending contract
       */
      withdrawCollateral(params: CallParams<OrbitalLendingArgs['obj']['withdrawCollateral(uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['withdrawCollateral(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawCollateral(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getCirculatingLST()uint64 method call against the orbital-lending contract
       */
      getCirculatingLst(params: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCirculatingLst(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCirculatingLST()uint64', v))
        return this
      },
      /**
       * Add a getTotalDeposits()uint64 method call against the orbital-lending contract
       */
      getTotalDeposits(params: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalDeposits(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalDeposits()uint64', v))
        return this
      },
      /**
       * Add a getAcceptedCollateralsCount()uint64 method call against the orbital-lending contract
       */
      getAcceptedCollateralsCount(params: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAcceptedCollateralsCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAcceptedCollateralsCount()uint64', v))
        return this
      },
      /**
       * Add a liquidatePartialAlgo(account,pay,uint64,uint64)void method call against the orbital-lending contract
       */
      liquidatePartialAlgo(params: CallParams<OrbitalLendingArgs['obj']['liquidatePartialAlgo(account,pay,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['liquidatePartialAlgo(account,pay,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.liquidatePartialAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool) method call against the orbital-lending contract
       */
      getLoanStatus(params: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLoanStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)', v))
        return this
      },
      /**
       * Add a gas()void method call against the orbital-lending contract
       */
      gas(params: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.gas(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a calculateCollateralValueUSD(uint64,uint64,uint64)uint64 method call against the orbital-lending contract
       */
      calculateCollateralValueUsd(params: CallParams<OrbitalLendingArgs['obj']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64'] | OrbitalLendingArgs['tuple']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateCollateralValueUsd(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateCollateralValueUSD(uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a pickupAlgoRewards()void method call against the orbital-lending contract
       */
      pickupAlgoRewards(params: CallParams<OrbitalLendingArgs['obj']['pickupAlgoRewards()void'] | OrbitalLendingArgs['tuple']['pickupAlgoRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pickupAlgoRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a migrateCollateralTokenId(uint64,pay)void method call against the orbital-lending contract
       */
      migrateCollateralTokenId(params: CallParams<OrbitalLendingArgs['obj']['migrateCollateralTokenId(uint64,pay)void'] | OrbitalLendingArgs['tuple']['migrateCollateralTokenId(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.migrateCollateralTokenId(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the orbital-lending contract
       */
      migrateContract(params: CallParams<OrbitalLendingArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.migrateContract(params)))
        resultMappers.push((v) => client.decodeReturnValue('migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void method call against the orbital-lending contract
       */
      acceptMigrationAlgoContract(params: CallParams<OrbitalLendingArgs['obj']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void'] | OrbitalLendingArgs['tuple']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.acceptMigrationAlgoContract(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void method call against the orbital-lending contract
       */
      goOnline(params: CallParams<OrbitalLendingArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.goOnline(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a goOffline()void method call against the orbital-lending contract
       */
      goOffline(params: CallParams<OrbitalLendingArgs['obj']['goOffline()void'] | OrbitalLendingArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.goOffline(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the orbital-lending contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OrbitalLendingComposer
  }
}
export type OrbitalLendingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void ABI method.
   *
   * Initializes the lending protocol with core parameters and configurations
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void'] | undefined]>

  /**
   * Calls the setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * Sets the core lending parameters for the protocol
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRateParams(params?: CallParams<OrbitalLendingArgs['obj']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the setContractState(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setContractState(params?: CallParams<OrbitalLendingArgs['obj']['setContractState(uint64)void'] | OrbitalLendingArgs['tuple']['setContractState(uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['setContractState(uint64)void'] | undefined]>

  /**
   * Calls the setMigrationAdmin(account)void ABI method.
   *
   * Sets or updates the migration administrator account used during contract upgrades.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setMigrationAdmin(params?: CallParams<OrbitalLendingArgs['obj']['setMigrationAdmin(account)void'] | OrbitalLendingArgs['tuple']['setMigrationAdmin(account)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['setMigrationAdmin(account)void'] | undefined]>

  /**
   * Calls the generateLSTToken(pay)void ABI method.
   *
   * Generates a new LST (Liquidity Staking Token) for the base lending token.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  generateLstToken(params?: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['generateLSTToken(pay)void'] | undefined]>

  /**
   * Calls the optInToLST(uint64,pay)void ABI method.
   *
   * Opts into an externally created LST token instead of minting a new one.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToLst(params?: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['optInToLST(uint64,pay)void'] | undefined]>

  /**
   * Calls the configureLSTToken(axfer,uint64)void ABI method.
   *
   * Configures the LST token by seeding the initial circulating supply.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configureLstToken(params?: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['configureLSTToken(axfer,uint64)void'] | undefined]>

  /**
   * Calls the getOraclePrice(uint64)uint64 ABI method.
   *
   * Retrieves current price for a token from the configured oracle
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOraclePrice(params?: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getOraclePrice(uint64)uint64'] | undefined]>

  /**
   * Calls the addNewCollateralType(uint64,uint64,pay,uint64)void ABI method.
   *
   * Adds a new asset type as accepted collateral for borrowing
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addNewCollateralType(params?: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,uint64,pay,uint64)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,uint64,pay,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['addNewCollateralType(uint64,uint64,pay,uint64)void'] | undefined]>

  /**
   * Calls the depositAlgo(pay,uint64,pay)void ABI method.
   *
   * Deposits ALGO into the lending pool and receives LST tokens in return
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositAlgo(params?: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['depositAlgo(pay,uint64,pay)void'] | undefined]>

  /**
   * Calls the withdrawDeposit(axfer,uint64,uint64,pay)void ABI method.
   *
   * Withdraws deposited assets by burning LST tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawDeposit(params?: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['withdrawDeposit(axfer,uint64,uint64,pay)void'] | undefined]>

  /**
   * Calls the borrow(axfer,uint64,uint64,uint64,uint64,pay)void ABI method.
   *
   * Borrows base assets against collateral with interest and fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  borrow(params?: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['borrow(axfer,uint64,uint64,uint64,uint64,pay)void'] | undefined]>

  /**
   * Calls the addLoanRecordExternal(uint64,uint64,account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLoanRecordExternal(params?: CallParams<OrbitalLendingArgs['obj']['addLoanRecordExternal(uint64,uint64,account,uint64)void'] | OrbitalLendingArgs['tuple']['addLoanRecordExternal(uint64,uint64,account,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['addLoanRecordExternal(uint64,uint64,account,uint64)void'] | undefined]>

  /**
   * Calls the accrueLoanInterest(account,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  accrueLoanInterest(params?: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['accrueLoanInterest(account,account)void'] | undefined]>

  /**
   * Calls the current_apr_bps()uint64 ABI method.
   *
   * Computes the current borrow APR in basis points, applying smoothing and clamps.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  currentAprBps(params?: CallParams<OrbitalLendingArgs['obj']['current_apr_bps()uint64'] | OrbitalLendingArgs['tuple']['current_apr_bps()uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['current_apr_bps()uint64'] | undefined]>

  /**
   * Calls the getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64) ABI method.
   *
   * Fetches the stored loan record for a borrower (without accrual).
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLoanRecord(params?: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the repayLoanAlgo(pay,uint64)void ABI method.
   *
   * Repays a loan using ALGO and optionally releases collateral
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  repayLoanAlgo(params?: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['repayLoanAlgo(pay,uint64)void'] | undefined]>

  /**
   * Calls the withdrawPlatformFees(account,pay)void ABI method.
   *
   * Withdraws accumulated protocol fees and commission to the admin-controlled account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawPlatformFees(params?: CallParams<OrbitalLendingArgs['obj']['withdrawPlatformFees(account,pay)void'] | OrbitalLendingArgs['tuple']['withdrawPlatformFees(account,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['withdrawPlatformFees(account,pay)void'] | undefined]>

  /**
   * Calls the buyoutSplitAlgo(account,account,axfer,pay,uint64)void ABI method.
   *
   * Purchases a borrower's collateral at a premium using ALGO payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyoutSplitAlgo(params?: CallParams<OrbitalLendingArgs['obj']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void'] | OrbitalLendingArgs['tuple']['buyoutSplitAlgo(account,account,axfer,pay,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['buyoutSplitAlgo(account,account,axfer,pay,uint64)void'] | undefined]>

  /**
   * Calls the maxWithdrawableCollateralLST(uint64)uint64 ABI method.
   *
   * Computes how much LST collateral the caller can withdraw using live market data.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  maxWithdrawableCollateralLst(params?: CallParams<OrbitalLendingArgs['obj']['maxWithdrawableCollateralLST(uint64)uint64'] | OrbitalLendingArgs['tuple']['maxWithdrawableCollateralLST(uint64)uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['maxWithdrawableCollateralLST(uint64)uint64'] | undefined]>

  /**
   * Calls the withdrawCollateral(uint64,uint64,uint64)void ABI method.
   *
   * Allows borrowers to withdraw a portion of their collateral within safety limits.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawCollateral(params?: CallParams<OrbitalLendingArgs['obj']['withdrawCollateral(uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['withdrawCollateral(uint64,uint64,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['withdrawCollateral(uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the getCirculatingLST()uint64 ABI method.
   *
   * Returns the current amount of LST tokens in circulation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCirculatingLst(params?: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getCirculatingLST()uint64'] | undefined]>

  /**
   * Calls the getTotalDeposits()uint64 ABI method.
   *
   * Returns the total amount of base assets deposited in the protocol
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalDeposits(params?: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getTotalDeposits()uint64'] | undefined]>

  /**
   * Calls the getAcceptedCollateralsCount()uint64 ABI method.
   *
   * Returns the number of different collateral types accepted by the protocol
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAcceptedCollateralsCount(params?: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getAcceptedCollateralsCount()uint64'] | undefined]>

  /**
   * Calls the liquidatePartialAlgo(account,pay,uint64,uint64)void ABI method.
   *
   * Liquidates an undercollateralized loan using ALGO payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  liquidatePartialAlgo(params?: CallParams<OrbitalLendingArgs['obj']['liquidatePartialAlgo(account,pay,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['liquidatePartialAlgo(account,pay,uint64,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['liquidatePartialAlgo(account,pay,uint64,uint64)void'] | undefined]>

  /**
   * Calls the getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool) ABI method.
   *
   * Retrieves comprehensive status information for a borrower's loan
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLoanStatus(params?: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | undefined]>

  /**
   * Calls the gas()void ABI method.
   *
   * No-op method kept for compatibility with interfaces that expect a gas entry point.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(params?: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['gas()void'] | undefined]>

  /**
   * Calls the calculateCollateralValueUSD(uint64,uint64,uint64)uint64 ABI method.
   *
   * Calculates the USD value of a collateral position using the LST exchange rate and oracle price.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateCollateralValueUsd(params?: CallParams<OrbitalLendingArgs['obj']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64'] | OrbitalLendingArgs['tuple']['calculateCollateralValueUSD(uint64,uint64,uint64)uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['calculateCollateralValueUSD(uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the pickupAlgoRewards()void ABI method.
   *
   * Harvests newly accrued consensus rewards for ALGO-based markets.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pickupAlgoRewards(params?: CallParams<OrbitalLendingArgs['obj']['pickupAlgoRewards()void'] | OrbitalLendingArgs['tuple']['pickupAlgoRewards()void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['pickupAlgoRewards()void'] | undefined]>

  /**
   * Calls the migrateCollateralTokenId(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  migrateCollateralTokenId(params?: CallParams<OrbitalLendingArgs['obj']['migrateCollateralTokenId(uint64,pay)void'] | OrbitalLendingArgs['tuple']['migrateCollateralTokenId(uint64,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['migrateCollateralTokenId(uint64,pay)void'] | undefined]>

  /**
   * Calls the migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Initiates migration by sweeping balances from this contract to the migration administrator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  migrateContract(params?: CallParams<OrbitalLendingArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void ABI method.
   *
   * Finalises migration by importing balances and restoring accounting on the new contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  acceptMigrationAlgoContract(params?: CallParams<OrbitalLendingArgs['obj']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void'] | OrbitalLendingArgs['tuple']['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void'] | undefined]>

  /**
   * Calls the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Registers the application account as an Algorand consensus participant.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOnline(params?: CallParams<OrbitalLendingArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | OrbitalLendingArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the goOffline()void ABI method.
   *
   * Unregisters the application account from consensus participation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOffline(params?: CallParams<OrbitalLendingArgs['obj']['goOffline()void'] | OrbitalLendingArgs['tuple']['goOffline()void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['goOffline()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the orbital-lending smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OrbitalLendingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OrbitalLendingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OrbitalLendingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OrbitalLendingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OrbitalLendingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OrbitalLendingComposerResults<TReturns>>
}
export type OrbitalLendingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

