/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client';
import { ABIReturn } from '@algorandfoundation/algokit-utils/types/app';
import { Arc56Contract } from '@algorandfoundation/algokit-utils/types/app-arc56';
import { AppClient as _AppClient, AppClientMethodCallParams, AppClientParams, AppClientBareCallParams, CallOnComplete, AppClientCompilationParams, ResolveAppClientByCreatorAndName, ResolveAppClientByNetwork, CloneAppClientParams } from '@algorandfoundation/algokit-utils/types/app-client';
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory';
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer';
import { SendParams, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction';
import { Address, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk';
import SimulateResponse = modelsv2.SimulateResponse;
export declare const APP_SPEC: Arc56Contract;
/**
 * A state record containing binary data
 */
export interface BinaryState {
    /**
     * Gets the state value as a Uint8Array
     */
    asByteArray(): Uint8Array | undefined;
    /**
     * Gets the state value as a string
     */
    asString(): string | undefined;
}
/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R ? (...args: Expand<A>) => Expand<R> : T extends infer O ? {
    [K in keyof O]: O[K];
} : never;
export type OracleKey = {
    assetId: bigint;
};
/**
 * Converts the ABI tuple representation of a OracleKey to the struct representation
 */
export declare function OracleKeyFromTuple(abiTuple: [bigint]): OracleKey;
export type TokenPrice = {
    assetId: bigint;
    price: bigint;
    lastUpdated: bigint;
};
/**
 * Converts the ABI tuple representation of a TokenPrice to the struct representation
 */
export declare function TokenPriceFromTuple(abiTuple: [bigint, bigint, bigint]): TokenPrice;
/**
 * The argument types for the Oracle contract
 */
export type OracleArgs = {
    /**
     * The object representation of the arguments for each method
     */
    obj: {
        'createApplication(account)void': {
            admin: Uint8Array | string;
        };
        'addTokenListing(uint64,uint64)void': {
            assetId: bigint | number;
            initialPrice: bigint | number;
        };
        'updateTokenPrice(uint64,uint64)void': {
            assetId: bigint | number;
            newPrice: bigint | number;
        };
        'getTokenPrice(uint64)(uint64,uint64,uint64)': {
            assetId: bigint | number;
        };
        'removeTokenListing(uint64)void': {
            assetId: bigint | number;
        };
    };
    /**
     * The tuple representation of the arguments for each method
     */
    tuple: {
        'createApplication(account)void': [admin: Uint8Array | string];
        'addTokenListing(uint64,uint64)void': [assetId: bigint | number, initialPrice: bigint | number];
        'updateTokenPrice(uint64,uint64)void': [assetId: bigint | number, newPrice: bigint | number];
        'getTokenPrice(uint64)(uint64,uint64,uint64)': [assetId: bigint | number];
        'removeTokenListing(uint64)void': [assetId: bigint | number];
    };
};
/**
 * The return type for each method
 */
export type OracleReturns = {
    'createApplication(account)void': void;
    'addTokenListing(uint64,uint64)void': void;
    'updateTokenPrice(uint64,uint64)void': void;
    'getTokenPrice(uint64)(uint64,uint64,uint64)': TokenPrice;
    'removeTokenListing(uint64)void': void;
};
/**
 * Defines the types of available calls and state of the Oracle smart contract.
 */
export type OracleTypes = {
    /**
     * Maps method signatures / names to their argument and return types.
     */
    methods: Record<'createApplication(account)void' | 'createApplication', {
        argsObj: OracleArgs['obj']['createApplication(account)void'];
        argsTuple: OracleArgs['tuple']['createApplication(account)void'];
        returns: OracleReturns['createApplication(account)void'];
    }> & Record<'addTokenListing(uint64,uint64)void' | 'addTokenListing', {
        argsObj: OracleArgs['obj']['addTokenListing(uint64,uint64)void'];
        argsTuple: OracleArgs['tuple']['addTokenListing(uint64,uint64)void'];
        returns: OracleReturns['addTokenListing(uint64,uint64)void'];
    }> & Record<'updateTokenPrice(uint64,uint64)void' | 'updateTokenPrice', {
        argsObj: OracleArgs['obj']['updateTokenPrice(uint64,uint64)void'];
        argsTuple: OracleArgs['tuple']['updateTokenPrice(uint64,uint64)void'];
        returns: OracleReturns['updateTokenPrice(uint64,uint64)void'];
    }> & Record<'getTokenPrice(uint64)(uint64,uint64,uint64)' | 'getTokenPrice', {
        argsObj: OracleArgs['obj']['getTokenPrice(uint64)(uint64,uint64,uint64)'];
        argsTuple: OracleArgs['tuple']['getTokenPrice(uint64)(uint64,uint64,uint64)'];
        returns: OracleReturns['getTokenPrice(uint64)(uint64,uint64,uint64)'];
    }> & Record<'removeTokenListing(uint64)void' | 'removeTokenListing', {
        argsObj: OracleArgs['obj']['removeTokenListing(uint64)void'];
        argsTuple: OracleArgs['tuple']['removeTokenListing(uint64)void'];
        returns: OracleReturns['removeTokenListing(uint64)void'];
    }>;
    /**
     * Defines the shape of the state of the application.
     */
    state: {
        global: {
            keys: {
                adminAccount: string;
            };
            maps: {};
        };
        box: {
            keys: {};
            maps: {
                tokenPrices: Map<OracleKey, TokenPrice>;
            };
        };
    };
};
/**
 * Defines the possible abi call signatures.
 */
export type OracleSignatures = keyof OracleTypes['methods'];
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OracleNonVoidMethodSignatures = keyof OracleTypes['methods'] extends infer T ? T extends keyof OracleTypes['methods'] ? MethodReturn<T> extends void ? never : T : never : never;
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>;
}>;
/**
 * Maps a method signature from the Oracle smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OracleSignatures> = OracleTypes['methods'][TSignature]['argsObj' | 'argsTuple'];
/**
 * Maps a method signature from the Oracle smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OracleSignatures> = OracleTypes['methods'][TSignature]['returns'];
/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OracleTypes['state']['global']['keys'];
/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = OracleTypes['state']['box']['keys'];
/**
 * Defines supported create method params for this smart contract
 */
export type OracleCreateCallParams = Expand<CallParams<OracleArgs['obj']['createApplication(account)void'] | OracleArgs['tuple']['createApplication(account)void']> & {
    method: 'createApplication';
} & {
    onComplete?: OnApplicationComplete.NoOpOC;
} & CreateSchema> | Expand<CallParams<OracleArgs['obj']['createApplication(account)void'] | OracleArgs['tuple']['createApplication(account)void']> & {
    method: 'createApplication(account)void';
} & {
    onComplete?: OnApplicationComplete.NoOpOC;
} & CreateSchema>;
/**
 * Defines arguments required for the deploy method.
 */
export type OracleDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: OracleCreateCallParams;
}>;
/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Oracle smart contract
 */
export declare abstract class OracleParamsFactory {
    /**
     * Gets available create ABI call param factories
     */
    static get create(): {
        _resolveByMethod<TParams extends OracleCreateCallParams & {
            method: string;
        }>(params: TParams): {
            signer?: (TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount) | undefined;
            rekeyTo?: (string | Address) | undefined;
            note?: (Uint8Array | string) | undefined;
            lease?: (Uint8Array | string) | undefined;
            staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
            extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
            maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
            validityWindow?: number | bigint | undefined;
            firstValidRound?: bigint | undefined;
            lastValidRound?: bigint | undefined;
            onComplete?: OnApplicationComplete | undefined;
            accountReferences?: (string | Address)[] | undefined;
            appReferences?: bigint[] | undefined;
            assetReferences?: bigint[] | undefined;
            boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference | import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier)[] | undefined;
            sender?: (Address | string) | undefined;
            method: string;
            args?: (import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | AppMethodCallTransactionArgument | undefined)[] | undefined;
        } & AppClientCompilationParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        };
        /**
         * Constructs create ABI call params for the oracle smart contract using the createApplication(account)void ABI method
         *
         * @param params Parameters for the call
         * @returns An `AppClientMethodCallParams` object for the call
         */
        createApplication(params: CallParams<OracleArgs["obj"]["createApplication(account)void"] | OracleArgs["tuple"]["createApplication(account)void"]> & AppClientCompilationParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }): AppClientMethodCallParams & AppClientCompilationParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        };
    };
    /**
     * Constructs a no op call for the addTokenListing(uint64,uint64)void ABI method
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static addTokenListing(params: CallParams<OracleArgs['obj']['addTokenListing(uint64,uint64)void'] | OracleArgs['tuple']['addTokenListing(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the updateTokenPrice(uint64,uint64)void ABI method
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static updateTokenPrice(params: CallParams<OracleArgs['obj']['updateTokenPrice(uint64,uint64)void'] | OracleArgs['tuple']['updateTokenPrice(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the getTokenPrice(uint64)(uint64,uint64,uint64) ABI method
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static getTokenPrice(params: CallParams<OracleArgs['obj']['getTokenPrice(uint64)(uint64,uint64,uint64)'] | OracleArgs['tuple']['getTokenPrice(uint64)(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the removeTokenListing(uint64)void ABI method
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static removeTokenListing(params: CallParams<OracleArgs['obj']['removeTokenListing(uint64)void'] | OracleArgs['tuple']['removeTokenListing(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
}
/**
 * A factory to create and deploy one or more instance of the oracle smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export declare class OracleFactory {
    /**
     * The underlying `AppFactory` for when you want to have more flexibility
     */
    readonly appFactory: _AppFactory;
    /**
     * Creates a new instance of `OracleFactory`
     *
     * @param params The parameters to initialise the app factory with
     */
    constructor(params: Omit<AppFactoryParams, 'appSpec'>);
    /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
    get appName(): string;
    /** The ARC-56 app spec being used */
    get appSpec(): Arc56Contract;
    /** A reference to the underlying `AlgorandClient` this app factory is using. */
    get algorand(): AlgorandClient;
    /**
     * Returns a new `AppClient` client for an app instance of the given ID.
     *
     * Automatically populates appName, defaultSender and source maps from the factory
     * if not specified in the params.
     * @param params The parameters to create the app client
     * @returns The `AppClient`
     */
    getAppClientById(params: AppFactoryAppClientParams): OracleClient;
    /**
     * Returns a new `AppClient` client, resolving the app by creator address and name
     * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
     *
     * Automatically populates appName, defaultSender and source maps from the factory
     * if not specified in the params.
     * @param params The parameters to create the app client
     * @returns The `AppClient`
     */
    getAppClientByCreatorAndName(params: AppFactoryResolveAppClientByCreatorAndNameParams): Promise<OracleClient>;
    /**
     * Idempotently deploys the oracle smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    deploy(params?: OracleDeployParams): Promise<{
        result: {
            return: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            deleteReturn: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            operationPerformed: "create";
            version: string;
            name: string;
            createdRound: bigint;
            updatedRound: bigint;
            createdMetadata: import("@algorandfoundation/algokit-utils/types/app").AppDeployMetadata;
            deleted: boolean;
            deletable?: boolean | undefined;
            updatable?: boolean | undefined;
            groupId: string;
            txIds: string[];
            returns?: import("@algorandfoundation/algokit-utils/types/app").ABIReturn[] | undefined;
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
            appId: bigint;
            appAddress: Address;
        } | {
            return: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            deleteReturn: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            operationPerformed: "update";
            appId: bigint;
            appAddress: Address;
            createdRound: bigint;
            updatedRound: bigint;
            createdMetadata: import("@algorandfoundation/algokit-utils/types/app").AppDeployMetadata;
            deleted: boolean;
            name: string;
            version: string;
            deletable?: boolean | undefined;
            updatable?: boolean | undefined;
            groupId: string;
            txIds: string[];
            returns?: import("@algorandfoundation/algokit-utils/types/app").ABIReturn[] | undefined;
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        } | {
            return: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            deleteReturn: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            operationPerformed: "replace";
            version: string;
            name: string;
            createdRound: bigint;
            updatedRound: bigint;
            createdMetadata: import("@algorandfoundation/algokit-utils/types/app").AppDeployMetadata;
            deleted: boolean;
            deletable?: boolean | undefined;
            updatable?: boolean | undefined;
            groupId: string;
            txIds: string[];
            returns?: import("@algorandfoundation/algokit-utils/types/app").ABIReturn[] | undefined;
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
            appId: bigint;
            appAddress: Address;
            deleteResult: import("@algorandfoundation/algokit-utils/types/transaction").ConfirmedTransactionResult;
        } | {
            return: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            deleteReturn: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            operationPerformed: "nothing";
            appId: bigint;
            appAddress: Address;
            createdRound: bigint;
            updatedRound: bigint;
            createdMetadata: import("@algorandfoundation/algokit-utils/types/app").AppDeployMetadata;
            deleted: boolean;
            name: string;
            version: string;
            deletable?: boolean | undefined;
            updatable?: boolean | undefined;
        };
        appClient: OracleClient;
    }>;
    /**
     * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
     */
    readonly params: {
        /**
         * Gets available create methods
         */
        create: {
            /**
             * Creates a new instance of the oracle smart contract using the createApplication(account)void ABI method.
             *
             * @param params The params for the smart contract call
             * @returns The create params
             */
            createApplication: (params: CallParams<OracleArgs["obj"]["createApplication(account)void"] | OracleArgs["tuple"]["createApplication(account)void"]> & AppClientCompilationParams & CreateSchema & {
                onComplete?: OnApplicationComplete.NoOpOC;
            }) => Promise<{
                deployTimeParams: import("@algorandfoundation/algokit-utils/types/app").TealTemplateParams | undefined;
                schema: {
                    globalInts: number;
                    globalByteSlices: number;
                    localInts: number;
                    localByteSlices: number;
                };
                approvalProgram: Uint8Array;
                clearStateProgram: Uint8Array;
                maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                note?: string | Uint8Array | undefined;
                signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC | OnApplicationComplete.CloseOutOC | OnApplicationComplete.UpdateApplicationOC | OnApplicationComplete.DeleteApplicationOC | undefined;
                lease?: string | Uint8Array | undefined;
                rekeyTo?: string | Address | undefined;
                staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                validityWindow?: number | bigint | undefined;
                firstValidRound?: bigint | undefined;
                lastValidRound?: bigint | undefined;
                accountReferences?: (string | Address)[] | undefined;
                appReferences?: bigint[] | undefined;
                assetReferences?: bigint[] | undefined;
                boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                sender?: string | Address | undefined;
                method: string;
                args?: (import("algosdk").ABIValue | AppMethodCallTransactionArgument | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined)[] | undefined;
                updatable?: boolean | undefined;
                deletable?: boolean | undefined;
                extraProgramPages?: number | undefined;
            } & {
                sender: Address;
                signer: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                method: import("@algorandfoundation/algokit-utils/types/app-arc56").Arc56Method;
                args: (Transaction | import("algosdk").ABIValue | import("algosdk").TransactionWithSigner | Promise<Transaction> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<{
                    sender: string | Address;
                    maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    note?: string | Uint8Array | undefined;
                    args?: Uint8Array[] | undefined;
                    signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                    onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC | OnApplicationComplete.CloseOutOC | OnApplicationComplete.UpdateApplicationOC | OnApplicationComplete.DeleteApplicationOC | undefined;
                    lease?: string | Uint8Array | undefined;
                    rekeyTo?: string | Address | undefined;
                    staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    validityWindow?: number | bigint | undefined;
                    firstValidRound?: bigint | undefined;
                    lastValidRound?: bigint | undefined;
                    accountReferences?: (string | Address)[] | undefined;
                    appReferences?: bigint[] | undefined;
                    assetReferences?: bigint[] | undefined;
                    boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                    approvalProgram: string | Uint8Array;
                    clearStateProgram: string | Uint8Array;
                    schema?: {
                        globalInts: number;
                        globalByteSlices: number;
                        localInts: number;
                        localByteSlices: number;
                    } | undefined;
                    extraProgramPages?: number | undefined;
                }> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<{
                    sender: string | Address;
                    signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                    rekeyTo?: string | Address | undefined;
                    note?: string | Uint8Array | undefined;
                    lease?: string | Uint8Array | undefined;
                    staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    validityWindow?: number | bigint | undefined;
                    firstValidRound?: bigint | undefined;
                    lastValidRound?: bigint | undefined;
                    appId: bigint;
                    onComplete?: OnApplicationComplete.UpdateApplicationOC | undefined;
                    args?: Uint8Array[] | undefined;
                    accountReferences?: (string | Address)[] | undefined;
                    appReferences?: bigint[] | undefined;
                    assetReferences?: bigint[] | undefined;
                    boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                    approvalProgram: string | Uint8Array;
                    clearStateProgram: string | Uint8Array;
                }> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<import("@algorandfoundation/algokit-utils/types/composer").AppMethodCallParams> | undefined)[] | undefined;
                onComplete: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC | OnApplicationComplete.CloseOutOC | OnApplicationComplete.UpdateApplicationOC | OnApplicationComplete.DeleteApplicationOC;
            }>;
        };
    };
    /**
     * Create transactions for the current app
     */
    readonly createTransaction: {
        /**
         * Gets available create methods
         */
        create: {
            /**
             * Creates a new instance of the oracle smart contract using the createApplication(account)void ABI method.
             *
             * @param params The params for the smart contract call
             * @returns The create transaction
             */
            createApplication: (params: CallParams<OracleArgs["obj"]["createApplication(account)void"] | OracleArgs["tuple"]["createApplication(account)void"]> & AppClientCompilationParams & CreateSchema & {
                onComplete?: OnApplicationComplete.NoOpOC;
            }) => Promise<{
                transactions: Transaction[];
                methodCalls: Map<number, import("algosdk").ABIMethod>;
                signers: Map<number, TransactionSigner>;
            }>;
        };
    };
    /**
     * Send calls to the current app
     */
    readonly send: {
        /**
         * Gets available create methods
         */
        create: {
            /**
             * Creates a new instance of the oracle smart contract using an ABI method call using the createApplication(account)void ABI method.
             *
             * @param params The params for the smart contract call
             * @returns The create result
             */
            createApplication: (params: CallParams<OracleArgs["obj"]["createApplication(account)void"] | OracleArgs["tuple"]["createApplication(account)void"]> & AppClientCompilationParams & CreateSchema & SendParams & {
                onComplete?: OnApplicationComplete.NoOpOC;
            }) => Promise<{
                result: {
                    return: (undefined | OracleReturns["createApplication(account)void"]);
                    compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
                    compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
                    appId: bigint;
                    groupId: string;
                    txIds: string[];
                    returns?: import("@algorandfoundation/algokit-utils/types/app").ABIReturn[] | undefined;
                    confirmations: modelsv2.PendingTransactionResponse[];
                    transactions: Transaction[];
                    confirmation: modelsv2.PendingTransactionResponse;
                    transaction: Transaction;
                    appAddress: Address;
                };
                appClient: OracleClient;
            }>;
        };
    };
}
/**
 * A client to make calls to the oracle smart contract
 */
export declare class OracleClient {
    /**
     * The underlying `AppClient` for when you want to have more flexibility
     */
    readonly appClient: _AppClient;
    /**
     * Creates a new instance of `OracleClient`
     *
     * @param appClient An `AppClient` instance which has been created with the Oracle app spec
     */
    constructor(appClient: _AppClient);
    /**
     * Creates a new instance of `OracleClient`
     *
     * @param params The parameters to initialise the app client with
     */
    constructor(params: Omit<AppClientParams, 'appSpec'>);
    /**
     * Checks for decode errors on the given return value and maps the return value to the return type for the given method
     * @returns The typed return value or undefined if there was no value
     */
    decodeReturnValue<TSignature extends OracleNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined): MethodReturn<TSignature> | undefined;
    /**
     * Returns a new `OracleClient` client, resolving the app by creator address and name
     * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
     * @param params The parameters to create the app client
     */
    static fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OracleClient>;
    /**
     * Returns an `OracleClient` instance for the current network based on
     * pre-determined network-specific app IDs specified in the ARC-56 app spec.
     *
     * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
     * @param params The parameters to create the app client
     */
    static fromNetwork(params: Omit<ResolveAppClientByNetwork, 'appSpec'>): Promise<OracleClient>;
    /** The ID of the app instance this client is linked to. */
    get appId(): bigint;
    /** The app address of the app instance this client is linked to. */
    get appAddress(): Address;
    /** The name of the app. */
    get appName(): string;
    /** The ARC-56 app spec being used */
    get appSpec(): Arc56Contract;
    /** A reference to the underlying `AlgorandClient` this app client is using. */
    get algorand(): AlgorandClient;
    /**
     * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
     */
    readonly params: {
        /**
         * Makes a clear_state call to an existing instance of the oracle smart contract.
         *
         * @param params The params for the bare (raw) call
         * @returns The clearState result
         */
        clearState: (params?: Expand<AppClientBareCallParams>) => import("@algorandfoundation/algokit-utils/types/composer").AppCallParams;
        /**
         * Makes a call to the oracle smart contract using the `addTokenListing(uint64,uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        addTokenListing: (params: CallParams<OracleArgs["obj"]["addTokenListing(uint64,uint64)void"] | OracleArgs["tuple"]["addTokenListing(uint64,uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the oracle smart contract using the `updateTokenPrice(uint64,uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        updateTokenPrice: (params: CallParams<OracleArgs["obj"]["updateTokenPrice(uint64,uint64)void"] | OracleArgs["tuple"]["updateTokenPrice(uint64,uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the oracle smart contract using the `getTokenPrice(uint64)(uint64,uint64,uint64)` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        getTokenPrice: (params: CallParams<OracleArgs["obj"]["getTokenPrice(uint64)(uint64,uint64,uint64)"] | OracleArgs["tuple"]["getTokenPrice(uint64)(uint64,uint64,uint64)"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the oracle smart contract using the `removeTokenListing(uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        removeTokenListing: (params: CallParams<OracleArgs["obj"]["removeTokenListing(uint64)void"] | OracleArgs["tuple"]["removeTokenListing(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
    };
    /**
     * Create transactions for the current app
     */
    readonly createTransaction: {
        /**
         * Makes a clear_state call to an existing instance of the oracle smart contract.
         *
         * @param params The params for the bare (raw) call
         * @returns The clearState result
         */
        clearState: (params?: Expand<AppClientBareCallParams>) => Promise<Transaction>;
        /**
         * Makes a call to the oracle smart contract using the `addTokenListing(uint64,uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        addTokenListing: (params: CallParams<OracleArgs["obj"]["addTokenListing(uint64,uint64)void"] | OracleArgs["tuple"]["addTokenListing(uint64,uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the oracle smart contract using the `updateTokenPrice(uint64,uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        updateTokenPrice: (params: CallParams<OracleArgs["obj"]["updateTokenPrice(uint64,uint64)void"] | OracleArgs["tuple"]["updateTokenPrice(uint64,uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the oracle smart contract using the `getTokenPrice(uint64)(uint64,uint64,uint64)` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        getTokenPrice: (params: CallParams<OracleArgs["obj"]["getTokenPrice(uint64)(uint64,uint64,uint64)"] | OracleArgs["tuple"]["getTokenPrice(uint64)(uint64,uint64,uint64)"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the oracle smart contract using the `removeTokenListing(uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        removeTokenListing: (params: CallParams<OracleArgs["obj"]["removeTokenListing(uint64)void"] | OracleArgs["tuple"]["removeTokenListing(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
    };
    /**
     * Send calls to the current app
     */
    readonly send: {
        /**
         * Makes a clear_state call to an existing instance of the oracle smart contract.
         *
         * @param params The params for the bare (raw) call
         * @returns The clearState result
         */
        clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => Promise<{
            groupId: string;
            txIds: string[];
            returns?: ABIReturn[] | undefined;
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
            return?: ABIReturn | undefined;
        }>;
        /**
         * Makes a call to the oracle smart contract using the `addTokenListing(uint64,uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        addTokenListing: (params: CallParams<OracleArgs["obj"]["addTokenListing(uint64,uint64)void"] | OracleArgs["tuple"]["addTokenListing(uint64,uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | OracleReturns["addTokenListing(uint64,uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the oracle smart contract using the `updateTokenPrice(uint64,uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        updateTokenPrice: (params: CallParams<OracleArgs["obj"]["updateTokenPrice(uint64,uint64)void"] | OracleArgs["tuple"]["updateTokenPrice(uint64,uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | OracleReturns["updateTokenPrice(uint64,uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the oracle smart contract using the `getTokenPrice(uint64)(uint64,uint64,uint64)` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        getTokenPrice: (params: CallParams<OracleArgs["obj"]["getTokenPrice(uint64)(uint64,uint64,uint64)"] | OracleArgs["tuple"]["getTokenPrice(uint64)(uint64,uint64,uint64)"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | OracleReturns["getTokenPrice(uint64)(uint64,uint64,uint64)"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the oracle smart contract using the `removeTokenListing(uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        removeTokenListing: (params: CallParams<OracleArgs["obj"]["removeTokenListing(uint64)void"] | OracleArgs["tuple"]["removeTokenListing(uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | OracleReturns["removeTokenListing(uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
    };
    /**
     * Clone this app client with different params
     *
     * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
     * @returns A new app client with the altered params
     */
    clone(params: CloneAppClientParams): OracleClient;
    /**
     * Methods to access state for the current oracle app
     */
    state: {
        /**
         * Methods to access global state for the current oracle app
         */
        global: {
            /**
             * Get all current keyed values from global state
             */
            getAll: () => Promise<Partial<Expand<GlobalKeysState>>>;
            /**
             * Get the current value of the admin_account key in global state
             */
            adminAccount: () => Promise<string | undefined>;
        };
        /**
         * Methods to access box state for the current oracle app
         */
        box: {
            /**
             * Get all current keyed values from box state
             */
            getAll: () => Promise<Partial<Expand<BoxKeysState>>>;
            /**
             * Get values from the token_prices map in box state
             */
            tokenPrices: {
                /**
                 * Get all current values of the token_prices map in box state
                 */
                getMap: () => Promise<Map<OracleKey, TokenPrice>>;
                /**
                 * Get a current value of the token_prices map by key from box state
                 */
                value: (key: OracleKey) => Promise<TokenPrice | undefined>;
            };
        };
    };
    newGroup(): OracleComposer;
}
export type OracleComposer<TReturns extends [...any[]] = []> = {
    /**
     * Calls the addTokenListing(uint64,uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    addTokenListing(params?: CallParams<OracleArgs['obj']['addTokenListing(uint64,uint64)void'] | OracleArgs['tuple']['addTokenListing(uint64,uint64)void']>): OracleComposer<[...TReturns, OracleReturns['addTokenListing(uint64,uint64)void'] | undefined]>;
    /**
     * Calls the updateTokenPrice(uint64,uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateTokenPrice(params?: CallParams<OracleArgs['obj']['updateTokenPrice(uint64,uint64)void'] | OracleArgs['tuple']['updateTokenPrice(uint64,uint64)void']>): OracleComposer<[...TReturns, OracleReturns['updateTokenPrice(uint64,uint64)void'] | undefined]>;
    /**
     * Calls the getTokenPrice(uint64)(uint64,uint64,uint64) ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    getTokenPrice(params?: CallParams<OracleArgs['obj']['getTokenPrice(uint64)(uint64,uint64,uint64)'] | OracleArgs['tuple']['getTokenPrice(uint64)(uint64,uint64,uint64)']>): OracleComposer<[...TReturns, OracleReturns['getTokenPrice(uint64)(uint64,uint64,uint64)'] | undefined]>;
    /**
     * Calls the removeTokenListing(uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    removeTokenListing(params?: CallParams<OracleArgs['obj']['removeTokenListing(uint64)void'] | OracleArgs['tuple']['removeTokenListing(uint64)void']>): OracleComposer<[...TReturns, OracleReturns['removeTokenListing(uint64)void'] | undefined]>;
    /**
     * Makes a clear_state call to an existing instance of the oracle smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    clearState(params?: AppClientBareCallParams): OracleComposer<[...TReturns, undefined]>;
    /**
     * Adds a transaction to the composer
     *
     * @param txn A transaction to add to the transaction group
     * @param signer The optional signer to use when signing this transaction.
     */
    addTransaction(txn: Transaction, signer?: TransactionSigner): OracleComposer<TReturns>;
    /**
     * Returns the underlying AtomicTransactionComposer instance
     */
    composer(): Promise<TransactionComposer>;
    /**
     * Simulates the transaction group and returns the result
     */
    simulate(): Promise<OracleComposerResults<TReturns> & {
        simulateResponse: SimulateResponse;
    }>;
    simulate(options: SkipSignaturesSimulateOptions): Promise<OracleComposerResults<TReturns> & {
        simulateResponse: SimulateResponse;
    }>;
    simulate(options: RawSimulateOptions): Promise<OracleComposerResults<TReturns> & {
        simulateResponse: SimulateResponse;
    }>;
    /**
     * Sends the transaction group to the network and returns the results
     */
    send(params?: SendParams): Promise<OracleComposerResults<TReturns>>;
};
export type OracleComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
    returns: TReturns;
}>;
//# sourceMappingURL=oracleClient.d.ts.map